{"version":3,"sources":["Container.js","Footer.js","client.js","forms/AddStudentForm.js","forms/EditStudentForm.js","Notifications.js","App.js","serviceWorker.js","index.js"],"names":["Container","props","style","width","margin","textAlign","children","Footer","className","undefined","numberOfStudents","backgroundColor","marginRight","size","onClick","handleAddStudentClickEvent","type","checkStatus","response","ok","error","Error","statusText","json","then","e","Promise","reject","getAllStudents","fetch","updateStudent","studentId","student","headers","method","body","JSON","stringify","deleteStudent","inputBottomMargin","marginBottom","tagStyle","color","AddStudentForm","initialValues","firstName","lastName","email","gender","validate","values","errors","test","includes","onSubmit","setSubmitting","addNewStudent","onSuccess","catch","err","onFailure","finally","touched","handleChange","handleBlur","handleSubmit","isSubmitting","submitForm","isValid","name","onChange","onBlur","value","placeholder","disabled","EditUserForm","this","submitter","console","log","Component","openNotification","message","description","notification","errorNotification","newTracker","appId","enableActivityTracking","minimumVisitLength","heartbeatDelay","trackPageView","App","state","students","isFetching","selectedStudent","isAddStudentModalVisible","isEditStudentModalVisible","openAddStudentModal","setState","closeAddStudentModal","openEditStudentModal","closeEditStudentModal","openNotificationWithIcon","fetchStudents","res","editUser","updateStudentFormSubmitter","status","commonElements","title","visible","onOk","onCancel","httpStatus","length","indicator","Icon","fontSize","spin","columns","key","render","text","charAt","toUpperCase","dataIndex","record","placement","onConfirm","okText","cancelText","stopPropagation","marginLeft","dataSource","pagination","rowKey","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.b7a8ff49.chunk.js","sourcesContent":["\nimport React from 'react';\n\nconst Container = props => (\n    <div style={{width: '1400px', margin: '0 auto', textAlign: 'center'}}>\n        {props.children}\n    </div>\n);\n\nexport default Container;","import React from 'react';\nimport Container from './Container';\nimport { Button, Avatar } from 'antd';\nimport './Footer.css';\n\nconst Footer = (props) => (\n    <div className= 'footer'>\n        <Container>\n            {props.numberOfStudents !== undefined ? \n                <Avatar \n                    style={{backgroundColor: '#f56a00', marginRight: '5px'}} \n                    size='large'>{props.numberOfStudents}</Avatar> : null\n            }\n            <Button onClick={() => props.handleAddStudentClickEvent()} type='primary'>Add new student +</Button>\n        </Container>\n    </div>\n);\n\nexport default Footer;","import fetch from 'unfetch';\n\nconst checkStatus = response => {\n    if (response.ok) {\n        return response;\n    } else {\n        let error = new Error(response.statusText);\n        error.response = response;\n        response.json().then(e => {\n            error.error = e;\n        });\n        return Promise.reject(error);\n    }\n};\n\nexport const getAllStudents = () => \n    fetch('api/students').then(checkStatus);\n\nexport const addNewStudent = student => \n    fetch('api/students', {\n        headers: {\n            'Content-Type' : 'application/json'\n        },\n        method: 'POST',\n        body: JSON.stringify(student)\n    })\n    .then(checkStatus);\n\nexport const updateStudent = (studentId, student) =>\n    fetch(`api/students/${studentId}`, {\n        headers: {\n            'Content-Type': 'application/json'\n        },\n        method: 'PUT',\n        body: JSON.stringify(student)\n    })\n    .then(checkStatus);\n\nexport const deleteStudent = studentId =>\n    fetch(`api/students/${studentId}`, {\n        method: 'DELETE'\n    })\n    .then(checkStatus);\n","import React from \"react\";\nimport { Formik } from \"formik\";\nimport { Input, Button, Tag } from \"antd\";\nimport { addNewStudent } from \"../client\";\n\nconst inputBottomMargin = { marginBottom: \"10px\" };\nconst tagStyle = {backgroundColor: \"#f50\", color: \"white\", ...inputBottomMargin};\n\nconst AddStudentForm = (props) => (\n  <Formik\n    initialValues={{ firstName: '', lastName: '', email: '', gender: '' }}\n    validate={values => {\n      let errors = {};\n\n      if (!values.firstName) {\n        errors.firstName = \"First Name required\";\n      }\n\n      if (!values.lastName) {\n        errors.lastName = \"Last Name required\";\n      }\n\n      if (!values.email) {\n        errors.email = \"Email required\";\n      } else if (\n        !/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}$/i.test(values.email)\n      ) {\n        errors.email = \"Invalid email address\";\n      }\n\n      if (!values.gender) {\n        errors.gender = \"Gender required\";\n      } else if (\n        ![\"MALE\", \"male\", \"FEMALE\", \"female\"].includes(values.gender)\n      ) {\n        errors.gender = \"Gender must be (MALE, male, FEMALE, female)\";\n      }\n\n      return errors;\n    }}\n    onSubmit={(student, { setSubmitting }) => {\n      addNewStudent(student).then(() => {\n        props.onSuccess();\n      })\n      .catch(err => {\n        props.onFailure(err);\n      })\n      .finally(() => {\n        setSubmitting(false);\n      })\n    }}\n  >\n    {({\n      values,\n      errors,\n      touched,\n      handleChange,\n      handleBlur,\n      handleSubmit,\n      isSubmitting,\n      submitForm,\n      isValid\n      /* and other goodies */\n    }) => (\n      <form onSubmit={handleSubmit}>\n        <Input\n          style={inputBottomMargin}\n          name=\"firstName\"\n          onChange={handleChange}\n          onBlur={handleBlur}\n          value={values.firstName}\n          placeholder=\"First name, e.g John\"\n        />\n        {errors.firstName && touched.firstName && (\n          <Tag style={tagStyle}>{errors.firstName}</Tag>\n        )}\n        <Input\n          style={inputBottomMargin}\n          name=\"lastName\"\n          onChange={handleChange}\n          onBlur={handleBlur}\n          value={values.lastName}\n          placeholder=\"Last name, e.g Smith\"\n        />\n        {errors.lastName && touched.lastName && (\n          <Tag style={tagStyle}>{errors.lastName}</Tag>\n        )}\n        <Input\n          style={inputBottomMargin}\n          name=\"email\"\n          type=\"email\"\n          onChange={handleChange}\n          onBlur={handleBlur}\n          value={values.email}\n          placeholder=\"email, e.g example@gmail.com\"\n        />\n        {errors.email && touched.email && (\n          <Tag style={tagStyle}>{errors.email}</Tag>\n        )}\n        <Input\n          style={inputBottomMargin}\n          name=\"gender\"\n          onChange={handleChange}\n          onBlur={handleBlur}\n          value={values.gender}\n          placeholder=\"Gender, e.g Male or Female\"\n        />\n        {errors.gender && touched.gender && (\n          <Tag style={tagStyle}>{errors.gender}</Tag>\n        )}\n        <Button\n          onClick={() => submitForm()}\n          type=\"submit\"\n          disabled={isSubmitting | (touched && !isValid)}\n        >\n          Submit\n        </Button>\n      </form>\n    )}\n  </Formik>\n);\n\nexport default AddStudentForm;\n","import React,  {Component} from 'react';\nimport { Formik } from 'formik';\nimport { Input, Tag, Button } from 'antd';\n\nexport default class EditUserForm extends Component {\n    render () {\n        const { submitter, initialValues } = this.props;\n        return (\n            <Formik\n                initialValues={initialValues}\n                validate={values => {\n                    let errors = {};\n                    if (!values.email) {\n                        errors.email = 'Required';\n                    } else if (\n                        !/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}$/i.test(values.email)\n                    ) {\n                        errors.email = 'Invalid email address';\n                    }\n                    if (!values.firstName) {\n                        errors.firstName = 'First name required';\n                    }\n                    if (!values.lastName) {\n                        errors.lastName = 'Last name required';\n                    }\n                    return errors;\n                }}\n                onSubmit={(values, { setSubmitting }) => {\n                    console.log(values)\n                    submitter(values);\n                    setSubmitting(false);\n                }}\n            >\n                {({\n                      values,\n                      errors,\n                      touched,\n                      handleChange,\n                      isValid,\n                      handleBlur,\n                      handleSubmit,\n                      isSubmitting,\n                      submitForm\n                      /* and other goodies */\n                  }) => (\n                    <form onSubmit={handleSubmit}>\n                        <Input\n                            style={{marginBottom: '5px'}}\n                            name=\"firstName\"\n                            onChange={handleChange}\n                            onBlur={handleBlur}\n                            value={values.firstName}\n                        />\n                        {errors.firstName && touched.firstName && <Tag style={{marginBottom: '5px'}} color=\"#f50\">{errors.firstName}</Tag>}\n\n                        <Input\n                            style={{marginBottom: '5px'}}\n                            name=\"lastName\"\n                            onChange={handleChange}\n                            onBlur={handleBlur}\n                            value={values.lastName}\n                        />\n                        {errors.lastName && touched.lastName && <Tag style={{marginBottom: '5px'}} color=\"#f50\">{errors.lastName}</Tag>}\n\n                        <Input\n                            style={{marginBottom: '5px'}}\n                            type=\"email\"\n                            name=\"email\"\n                            onChange={handleChange}\n                            onBlur={handleBlur}\n                            value={values.email}\n                        />\n                        {errors.email && touched.email && <Tag style={{marginBottom: '5px'}} color=\"#f50\">{errors.email}</Tag>}\n\n                        <Button onClick = {() => submitForm()} type=\"submit\" disabled={isSubmitting | (touched && !isValid) }>\n                            Submit\n                        </Button>\n                    </form>\n                )}\n            </Formik>\n        )\n    }\n}\n","import { notification } from \"antd\";\n\nconst openNotification = (type, message, description) => {\n  notification[type]({\n    message,\n    description\n  });\n};\n\nexport const successNotification = (message, description) =>\n  openNotification(\"success\", message, description);\n\nexport const infoNotification = (message, description) =>\n  openNotification(\"info\", message, description);\n\nexport const warningNotification = (message, description) =>\n  openNotification(\"warning\", message, description);\n\nexport const errorNotification = (message, description) =>\n  openNotification(\"error\", message, description);\n","import React, { Component, Fragment } from \"react\";\nimport Container from \"./Container\";\nimport Footer from \"./Footer\";\nimport \"./App.css\";\nimport {\n  getAllStudents,\n  updateStudent,\n  deleteStudent\n} from \"./client\";\nimport AddStudentForm from \"./forms/AddStudentForm\";\nimport EditStudentForm from './forms/EditStudentForm';\nimport { errorNotification } from \"./Notifications\";\nimport Icon from '@ant-design/icons';\nimport {\n  Table,\n  Avatar,\n  Spin,\n  Modal,\n  Empty,\n  PageHeader,\n  Button,\n  notification,\n  Popconfirm\n} from 'antd';\nimport {\n  newTracker,\n  enableActivityTracking,\n  trackPageView\n} from '@snowplow/browser-tracker';\n\nnewTracker('sp', '0.0.0.0:9090', {\n  appId: 'fullStackApp-frontend',\n});\n\nenableActivityTracking({\n  minimumVisitLength: 30,\n  heartbeatDelay: 10\n});\n\ntrackPageView();\n\n\nconst getIndicatorIcon = () => <Icon type=\"loading\" style={{ fontSize: 24 }} spin />;\n\nclass App extends Component {\n  state = {\n    students: [],\n    isFetching: false,\n    selectedStudent: {},\n    isAddStudentModalVisible: false,\n    isEditStudentModalVisible: false\n  };\n\n  componentDidMount() {\n    this.fetchStudents();\n  }\n\n  openAddStudentModal = () => this.setState({ isAddStudentModalVisible: true });\n\n  closeAddStudentModal = () => this.setState({ isAddStudentModalVisible: false });\n\n  openEditStudentModal = () => this.setState({ isEditStudentModalVisible: true });\n\n  closeEditStudentModal = () => this.setState({ isEditStudentModalVisible: false});\n\n  openNotificationWithIcon = (type, message, description) => notification[type]({message, description});\n\n  fetchStudents = () => {\n    this.setState({\n      isFetching: true\n    });\n    getAllStudents()\n      .then(res =>\n        res.json().then(students => {\n          console.log(students);\n          this.setState({\n            students,\n            isFetching: false\n          });\n        })\n      )\n      .catch(error => {\n        console.log(error.error);\n        const message = error.error.message;\n        const description = error.error.error;\n        errorNotification(message, description);\n        this.setState({\n          isFetching: false\n        });\n      });\n  };\n\n  editUser = selectedStudent => {\n    this.setState({selectedStudent});\n    this.openEditStudentModal();\n  };\n\n  updateStudentFormSubmitter = student => {\n    updateStudent(student.studentId, student).then(() => {\n      this.openNotificationWithIcon(\n          'success',\n          'Student updated',\n          `${student.studentId} has been updated`);\n      this.closeEditStudentModal();\n      this.fetchStudents();\n    }).catch(err => {\n      console.error(err.error);\n      this.openNotificationWithIcon(\n          'error',\n          'error',\n          `(${err.error.status}) ${err.error.error}`\n      );\n    });\n  };\n\n  deleteStudent = studentId => {\n    deleteStudent(studentId).then(() => {\n      this.openNotificationWithIcon('success', 'Student deleted', `${studentId} was deleted`);\n      this.fetchStudents();\n    }).catch(err => {\n      this.openNotificationWithIcon('error', 'error', `(${err.error.status}) ${err.error.error}`);\n    });\n  };\n\n  render() {\n    const { students, isFetching, isAddStudentModalVisible } = this.state;\n\n    const commonElements = () => (\n      <div>\n        <Modal\n          title=\"Add new student\"\n          visible={isAddStudentModalVisible}\n          onOk={this.closeAddStudentModal}\n          onCancel={this.closeAddStudentModal}\n          width={1000}\n        >\n          <AddStudentForm\n            onSuccess={() => {\n              this.closeAddStudentModal();\n              this.fetchStudents();\n            }}\n            onFailure={(error) => {\n              const message = error.error.message;\n              const description = error.error.httpStatus;\n              errorNotification(message, description);\n            }}\n          />\n        </Modal>\n\n        <Modal\n            title=\"Edit\"\n            visible={this.state.isEditStudentModalVisible}\n            onOk={this.closeEditStudentModal}\n            onCancel={this.closeEditStudentModal}\n            width={1000}\n        >\n          <PageHeader title={`${this.state.selectedStudent.studentId}`} />\n          <EditStudentForm\n            initialValues={this.state.selectedStudent}\n            submitter={this.updateStudentFormSubmitter} />\n        </Modal>\n\n        <Footer\n          numberOfStudents={students.length}\n          handleAddStudentClickEvent={this.openAddStudentModal}\n        />\n      </div>\n    );\n\n    if (isFetching) {\n      return (\n        <Container>\n          <Spin indicator={getIndicatorIcon()} />\n        </Container>\n      );\n    }\n\n    if (students && students.length) {\n\n      const columns = [\n        {\n          title: \"\",\n          key: \"avatar\",\n          render: (text, student) => (\n            <Avatar size=\"large\">\n              {`${student.firstName.charAt(0).toUpperCase()}${student.lastName.charAt(0).toUpperCase()}`}\n            </Avatar>\n          )\n        },\n        {\n          title: \"Student Id\",\n          dataIndex: \"studentId\",\n          key: \"studentId\"\n        },\n        {\n          title: \"First Name\",\n          dataIndex: \"firstName\",\n          key: \"firstName\"\n        },\n        {\n          title: \"Last Name\",\n          dataIndex: \"lastName\",\n          key: \"lastName\"\n        },\n        {\n          title: \"Email\",\n          dataIndex: \"email\",\n          key: \"email\"\n        },\n        {\n          title: \"Gender\",\n          dataIndex: \"gender\",\n          key: \"gender\"\n        },\n        {\n          title: 'Action',\n          key: 'action',\n          render: (text, record) => (\n            <Fragment>\n              <Popconfirm\n                placement=\"topRight\"\n                title={`Are you sure to delete ${record.studentId}`}\n                onConfirm={() => this.deleteStudent(record.studentId)} okText='Yes' cancelText='No'\n                onCancel={e => e.stopPropagation()}>\n                <Button type='danger' onClick={(e) => e.stopPropagation()}>Delete</Button>\n              </Popconfirm>\n              <Button style={{marginLeft: '5px'}} type='primary' onClick={() => this.editUser(record)}>Edit</Button>\n            </Fragment>\n          ),\n        }\n      ];\n\n      return (\n        <Container>\n          <Table\n            style={{ marginBottom: \"100px\" }}\n            dataSource={students}\n            columns={columns}\n            pagination={false}\n            rowKey=\"studentId\"\n          />\n          {commonElements()}\n        </Container>\n      );\n    }\n\n    return (\n      <Container>\n        <Empty description={<h1>No students found</h1>} />\n        {commonElements()}\n      </Container>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'antd/dist/antd.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}