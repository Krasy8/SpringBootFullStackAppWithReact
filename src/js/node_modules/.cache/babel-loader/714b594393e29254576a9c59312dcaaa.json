{"ast":null,"code":"/*!\n * Core functionality for Snowplow JavaScript trackers v3.1.0 (http://bit.ly/sp-js)\n * Copyright 2021 Snowplow Analytics Ltd, 2010 Anthon Pang\n * Licensed under BSD-3-Clause\n */\nimport { __spreadArray, __assign } from 'tslib';\nimport { v4 } from 'uuid';\nvar version$1 = \"3.1.0\";\n/*\n * Copyright (c) 2013 Kevin van Zonneveld (http://kvz.io)\n * and Contributors (http://phpjs.org/authors)\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy of\n * this software and associated documentation files (the \"Software\"), to deal in\n * the Software without restriction, including without limitation the rights to\n * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\n * of the Software, and to permit persons to whom the Software is furnished to do\n * so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n/**\n * Encodes a string into a url safe Base 64 encoded string\n * @remark See: {@link http://tools.ietf.org/html/rfc4648#page-7}\n * @param data - String to encode\n * @returns The url safe Base 64 string\n */\n\nfunction base64urlencode(data) {\n  if (!data) {\n    return data;\n  }\n\n  var enc = base64encode(data);\n  return enc.replace(/=/g, '').replace(/\\+/g, '-').replace(/\\//g, '_');\n}\n\nvar b64 = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';\n/**\n * Encode string as base64.\n * Any type can be passed, but will be stringified\n *\n * @param data - string to encode\n * @returns base64-encoded string\n */\n\nfunction base64encode(data) {\n  // discuss at: http://phpjs.org/functions/base64_encode/\n  // original by: Tyler Akins (http://rumkin.com)\n  // improved by: Bayron Guevara\n  // improved by: Thunder.m\n  // improved by: Kevin van Zonneveld (http://kevin.vanzonneveld.net)\n  // improved by: Kevin van Zonneveld (http://kevin.vanzonneveld.net)\n  // improved by: Rafał Kukawski (http://kukawski.pl)\n  // bugfixed by: Pellentesque Malesuada\n  // example 1: base64_encode('Kevin van Zonneveld');\n  // returns 1: 'S2V2aW4gdmFuIFpvbm5ldmVsZA=='\n  // example 2: base64_encode('a');\n  // returns 2: 'YQ=='\n  // example 3: base64_encode('✓ à la mode');\n  // returns 3: '4pyTIMOgIGxhIG1vZGU='\n  var o1,\n      o2,\n      o3,\n      h1,\n      h2,\n      h3,\n      h4,\n      bits,\n      i = 0,\n      ac = 0;\n  var tmp_arr = [];\n\n  if (!data) {\n    return data;\n  }\n\n  data = unescape(encodeURIComponent(data));\n\n  do {\n    // pack three octets into four hexets\n    o1 = data.charCodeAt(i++);\n    o2 = data.charCodeAt(i++);\n    o3 = data.charCodeAt(i++);\n    bits = o1 << 16 | o2 << 8 | o3;\n    h1 = bits >> 18 & 0x3f;\n    h2 = bits >> 12 & 0x3f;\n    h3 = bits >> 6 & 0x3f;\n    h4 = bits & 0x3f; // use hexets to index into b64, and append result to encoded string\n\n    tmp_arr[ac++] = b64.charAt(h1) + b64.charAt(h2) + b64.charAt(h3) + b64.charAt(h4);\n  } while (i < data.length);\n\n  var enc = tmp_arr.join('');\n  var r = data.length % 3;\n  return (r ? enc.slice(0, r - 3) : enc) + '==='.slice(r || 3);\n}\n/*\n * Copyright (c) 2021 Snowplow Analytics Ltd, 2010 Anthon Pang\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are met:\n *\n * 1. Redistributions of source code must retain the above copyright notice, this\n *    list of conditions and the following disclaimer.\n *\n * 2. Redistributions in binary form must reproduce the above copyright notice,\n *    this list of conditions and the following disclaimer in the documentation\n *    and/or other materials provided with the distribution.\n *\n * 3. Neither the name of the copyright holder nor the names of its\n *    contributors may be used to endorse or promote products derived from\n *    this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\n * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\n * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\n * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\n\nfunction payloadBuilder() {\n  var dict = {},\n      allJson = [],\n      jsonForProcessing = [];\n  var processor;\n\n  var add = function (key, value) {\n    if (value != null && value !== '') {\n      // null also checks undefined\n      dict[key] = value;\n    }\n  };\n\n  var addDict = function (dict) {\n    for (var key in dict) {\n      if (Object.prototype.hasOwnProperty.call(dict, key)) {\n        add(key, dict[key]);\n      }\n    }\n  };\n\n  var addJson = function (keyIfEncoded, keyIfNotEncoded, json) {\n    if (json && isNonEmptyJson(json)) {\n      var jsonWithKeys = {\n        keyIfEncoded: keyIfEncoded,\n        keyIfNotEncoded: keyIfNotEncoded,\n        json: json\n      };\n      jsonForProcessing.push(jsonWithKeys);\n      allJson.push(jsonWithKeys);\n    }\n  };\n\n  return {\n    add: add,\n    addDict: addDict,\n    addJson: addJson,\n    getPayload: function () {\n      return dict;\n    },\n    getJson: function () {\n      return allJson;\n    },\n    withJsonProcessor: function (jsonProcessor) {\n      processor = jsonProcessor;\n    },\n    build: function () {\n      processor === null || processor === void 0 ? void 0 : processor(this, jsonForProcessing);\n      return dict;\n    }\n  };\n}\n/**\n * A helper to build a Snowplow request from a set of name-value pairs, provided using the add methods.\n * Will base64 encode JSON, if desired, on build\n *\n * @return The request builder, with add and build methods\n */\n\n\nfunction payloadJsonProcessor(encodeBase64) {\n  return function (payloadBuilder, jsonForProcessing) {\n    for (var _i = 0, jsonForProcessing_1 = jsonForProcessing; _i < jsonForProcessing_1.length; _i++) {\n      var json = jsonForProcessing_1[_i];\n      var str = JSON.stringify(json.json);\n\n      if (encodeBase64) {\n        payloadBuilder.add(json.keyIfEncoded, base64urlencode(str));\n      } else {\n        payloadBuilder.add(json.keyIfNotEncoded, str);\n      }\n    }\n\n    jsonForProcessing.length = 0;\n  };\n}\n/**\n * Is property a non-empty JSON?\n * @param property - Checks if object is non-empty json\n */\n\n\nfunction isNonEmptyJson(property) {\n  if (!isJson(property)) {\n    return false;\n  }\n\n  for (var key in property) {\n    if (Object.prototype.hasOwnProperty.call(property, key)) {\n      return true;\n    }\n  }\n\n  return false;\n}\n/**\n * Is property a JSON?\n * @param property - Checks if object is json\n */\n\n\nfunction isJson(property) {\n  return typeof property !== 'undefined' && property !== null && (property.constructor === {}.constructor || property.constructor === [].constructor);\n}\n/*\n * Copyright (c) 2021 Snowplow Analytics Ltd, 2010 Anthon Pang\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are met:\n *\n * 1. Redistributions of source code must retain the above copyright notice, this\n *    list of conditions and the following disclaimer.\n *\n * 2. Redistributions in binary form must reproduce the above copyright notice,\n *    this list of conditions and the following disclaimer in the documentation\n *    and/or other materials provided with the distribution.\n *\n * 3. Neither the name of the copyright holder nor the names of its\n *    contributors may be used to endorse or promote products derived from\n *    this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\n * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\n * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\n * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\n\nvar label = 'Snowplow: ';\nvar LOG_LEVEL;\n\n(function (LOG_LEVEL) {\n  LOG_LEVEL[LOG_LEVEL[\"none\"] = 0] = \"none\";\n  LOG_LEVEL[LOG_LEVEL[\"error\"] = 1] = \"error\";\n  LOG_LEVEL[LOG_LEVEL[\"warn\"] = 2] = \"warn\";\n  LOG_LEVEL[LOG_LEVEL[\"debug\"] = 3] = \"debug\";\n  LOG_LEVEL[LOG_LEVEL[\"info\"] = 4] = \"info\";\n})(LOG_LEVEL || (LOG_LEVEL = {}));\n\nvar LOG = logger();\n\nfunction logger(logLevel) {\n  if (logLevel === void 0) {\n    logLevel = LOG_LEVEL.warn;\n  }\n\n  function setLogLevel(level) {\n    if (LOG_LEVEL[level]) {\n      logLevel = level;\n    } else {\n      logLevel = LOG_LEVEL.warn;\n    }\n  }\n  /**\n   * Log errors, with or without error object\n   */\n\n\n  function error(message, error) {\n    var extraParams = [];\n\n    for (var _i = 2; _i < arguments.length; _i++) {\n      extraParams[_i - 2] = arguments[_i];\n    }\n\n    if (logLevel >= LOG_LEVEL.error && typeof console !== 'undefined') {\n      var logMsg = label + message + '\\n';\n\n      if (error) {\n        console.error.apply(console, __spreadArray([logMsg + '\\n', error], extraParams));\n      } else {\n        console.error.apply(console, __spreadArray([logMsg], extraParams));\n      }\n    }\n  }\n  /**\n   * Log warnings, with or without error object\n   */\n\n\n  function warn(message, error) {\n    var extraParams = [];\n\n    for (var _i = 2; _i < arguments.length; _i++) {\n      extraParams[_i - 2] = arguments[_i];\n    }\n\n    if (logLevel >= LOG_LEVEL.warn && typeof console !== 'undefined') {\n      var logMsg = label + message;\n\n      if (error) {\n        console.warn.apply(console, __spreadArray([logMsg + '\\n', error], extraParams));\n      } else {\n        console.warn.apply(console, __spreadArray([logMsg], extraParams));\n      }\n    }\n  }\n  /**\n   * Log debug messages\n   */\n\n\n  function debug(message) {\n    var extraParams = [];\n\n    for (var _i = 1; _i < arguments.length; _i++) {\n      extraParams[_i - 1] = arguments[_i];\n    }\n\n    if (logLevel >= LOG_LEVEL.debug && typeof console !== 'undefined') {\n      console.debug.apply(console, __spreadArray([label + message], extraParams));\n    }\n  }\n  /**\n   * Log info messages\n   */\n\n\n  function info(message) {\n    var extraParams = [];\n\n    for (var _i = 1; _i < arguments.length; _i++) {\n      extraParams[_i - 1] = arguments[_i];\n    }\n\n    if (logLevel >= LOG_LEVEL.info && typeof console !== 'undefined') {\n      console.info.apply(console, __spreadArray([label + message], extraParams));\n    }\n  }\n\n  return {\n    setLogLevel: setLogLevel,\n    warn: warn,\n    error: error,\n    debug: debug,\n    info: info\n  };\n}\n/*\n * Copyright (c) 2021 Snowplow Analytics Ltd, 2010 Anthon Pang\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are met:\n *\n * 1. Redistributions of source code must retain the above copyright notice, this\n *    list of conditions and the following disclaimer.\n *\n * 2. Redistributions in binary form must reproduce the above copyright notice,\n *    this list of conditions and the following disclaimer in the documentation\n *    and/or other materials provided with the distribution.\n *\n * 3. Neither the name of the copyright holder nor the names of its\n *    contributors may be used to endorse or promote products derived from\n *    this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\n * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\n * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\n * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\n/**\n * Contains helper functions to aid in the addition and removal of Global Contexts\n */\n\n\nfunction globalContexts() {\n  var globalPrimitives = [];\n  var conditionalProviders = [];\n  /**\n   * Returns all applicable global contexts for a specified event\n   * @param event - The event to check for applicable global contexts for\n   * @returns An array of contexts\n   */\n\n  var assembleAllContexts = function (event) {\n    var eventSchema = getUsefulSchema(event);\n    var eventType = getEventType(event);\n    var contexts = [];\n    var generatedPrimitives = generatePrimitives(globalPrimitives, event, eventType, eventSchema);\n    contexts.push.apply(contexts, generatedPrimitives);\n    var generatedConditionals = generateConditionals(conditionalProviders, event, eventType, eventSchema);\n    contexts.push.apply(contexts, generatedConditionals);\n    return contexts;\n  };\n\n  return {\n    getGlobalPrimitives: function () {\n      return globalPrimitives;\n    },\n    getConditionalProviders: function () {\n      return conditionalProviders;\n    },\n    addGlobalContexts: function (contexts) {\n      var acceptedConditionalContexts = [];\n      var acceptedContextPrimitives = [];\n\n      for (var _i = 0, contexts_1 = contexts; _i < contexts_1.length; _i++) {\n        var context = contexts_1[_i];\n\n        if (isConditionalContextProvider(context)) {\n          acceptedConditionalContexts.push(context);\n        } else if (isContextPrimitive(context)) {\n          acceptedContextPrimitives.push(context);\n        }\n      }\n\n      globalPrimitives = globalPrimitives.concat(acceptedContextPrimitives);\n      conditionalProviders = conditionalProviders.concat(acceptedConditionalContexts);\n    },\n    clearGlobalContexts: function () {\n      conditionalProviders = [];\n      globalPrimitives = [];\n    },\n    removeGlobalContexts: function (contexts) {\n      var _loop_1 = function (context) {\n        if (isConditionalContextProvider(context)) {\n          conditionalProviders = conditionalProviders.filter(function (item) {\n            return JSON.stringify(item) === JSON.stringify(context);\n          });\n        } else if (isContextPrimitive(context)) {\n          globalPrimitives = globalPrimitives.filter(function (item) {\n            return JSON.stringify(item) === JSON.stringify(context);\n          });\n        }\n      };\n\n      for (var _i = 0, contexts_2 = contexts; _i < contexts_2.length; _i++) {\n        var context = contexts_2[_i];\n\n        _loop_1(context);\n      }\n    },\n    getApplicableContexts: function (event) {\n      return assembleAllContexts(event);\n    }\n  };\n}\n\nfunction pluginContexts(plugins) {\n  /**\n   * Add common contexts to every event\n   *\n   * @param array - additionalContexts List of user-defined contexts\n   * @return userContexts combined with commonContexts\n   */\n  return {\n    addPluginContexts: function (additionalContexts) {\n      var combinedContexts = additionalContexts !== null && additionalContexts !== void 0 ? additionalContexts : [];\n      plugins.forEach(function (plugin) {\n        try {\n          if (plugin.contexts) {\n            combinedContexts.push.apply(combinedContexts, plugin.contexts());\n          }\n        } catch (ex) {\n          LOG.error('Error adding plugin contexts', ex);\n        }\n      });\n      return combinedContexts;\n    }\n  };\n}\n/**\n * Find dynamic context generating functions and return their results to be merged into the static contexts\n * Combine an array of unchanging contexts with the result of a context-creating function\n *\n * @param dynamicOrStaticContexts - Array of custom context Objects or custom context generating functions\n * @param Parameters - to pass to dynamic context callbacks\n * @returns An array of Self Describing JSON context\n */\n\n\nfunction resolveDynamicContext(dynamicOrStaticContexts) {\n  var _a;\n\n  var extraParams = [];\n\n  for (var _i = 1; _i < arguments.length; _i++) {\n    extraParams[_i - 1] = arguments[_i];\n  }\n\n  return (_a = dynamicOrStaticContexts === null || dynamicOrStaticContexts === void 0 ? void 0 : dynamicOrStaticContexts.map(function (context) {\n    if (typeof context === 'function') {\n      try {\n        return context.apply(void 0, extraParams);\n      } catch (e) {\n        //TODO: provide warning\n        return undefined;\n      }\n    } else {\n      return context;\n    }\n  }).filter(Boolean)) !== null && _a !== void 0 ? _a : [];\n}\n/**\n * Slices a schema into its composite parts. Useful for ruleset filtering.\n * @param input - A schema string\n * @returns The vendor, schema name, major, minor and patch information of a schema string\n */\n\n\nfunction getSchemaParts(input) {\n  var re = new RegExp('^iglu:([a-zA-Z0-9-_.]+)/([a-zA-Z0-9-_]+)/jsonschema/([1-9][0-9]*)-(0|[1-9][0-9]*)-(0|[1-9][0-9]*)$');\n  var matches = re.exec(input);\n  if (matches !== null) return matches.slice(1, 6);\n  return undefined;\n}\n/**\n * Validates the vendor section of a schema string contains allowed wildcard values\n * @param parts - Array of parts from a schema string\n * @returns Whether the vendor validation parts are a valid combination\n */\n\n\nfunction validateVendorParts(parts) {\n  if (parts[0] === '*' || parts[1] === '*') {\n    return false; // no wildcard in first or second part\n  }\n\n  if (parts.slice(2).length > 0) {\n    var asterisk = false;\n\n    for (var _i = 0, _a = parts.slice(2); _i < _a.length; _i++) {\n      var part = _a[_i];\n      if (part === '*') // mark when we've found a wildcard\n        asterisk = true;else if (asterisk) // invalid if alpha parts come after wildcard\n        return false;\n    }\n\n    return true;\n  } else if (parts.length == 2) return true;\n\n  return false;\n}\n/**\n * Validates the vendor part of a schema string is valid for a rule set\n * @param input - Vendor part of a schema string\n * @returns Whether the vendor validation string is valid\n */\n\n\nfunction validateVendor(input) {\n  var parts = input.split('.');\n  if (parts && parts.length > 1) return validateVendorParts(parts);\n  return false;\n}\n/**\n * Checks for validity of input and returns all the sections of a schema string that are used to match rules in a ruleset\n * @param input - A Schema string\n * @returns The sections of a schema string that are used to match rules in a ruleset\n */\n\n\nfunction getRuleParts(input) {\n  var re = new RegExp('^iglu:((?:(?:[a-zA-Z0-9-_]+|\\\\*).)+(?:[a-zA-Z0-9-_]+|\\\\*))/([a-zA-Z0-9-_.]+|\\\\*)/jsonschema/([1-9][0-9]*|\\\\*)-(0|[1-9][0-9]*|\\\\*)-(0|[1-9][0-9]*|\\\\*)$');\n  var matches = re.exec(input);\n  if (matches !== null && validateVendor(matches[1])) return matches.slice(1, 6);\n  return undefined;\n}\n/**\n * Ensures the rules specified in a schema string of a ruleset are valid\n * @param input - A Schema string\n * @returns if there rule is valid\n */\n\n\nfunction isValidRule(input) {\n  var ruleParts = getRuleParts(input);\n\n  if (ruleParts) {\n    var vendor = ruleParts[0];\n    return ruleParts.length === 5 && validateVendor(vendor);\n  }\n\n  return false;\n}\n/**\n * Check if a variable is an Array containing only strings\n * @param input - The variable to validate\n * @returns True if the input is an array containing only strings\n */\n\n\nfunction isStringArray(input) {\n  return Array.isArray(input) && input.every(function (x) {\n    return typeof x === 'string';\n  });\n}\n/**\n * Validates whether a rule set is an array of valid ruleset strings\n * @param input - The Array of rule set arguments\n * @returns True is the input is an array of valid rules\n */\n\n\nfunction isValidRuleSetArg(input) {\n  if (isStringArray(input)) return input.every(function (x) {\n    return isValidRule(x);\n  });else if (typeof input === 'string') return isValidRule(input);\n  return false;\n}\n/**\n * Check if a variable is a valid, non-empty Self Describing JSON\n * @param input - The variable to validate\n * @returns True if a valid Self Describing JSON\n */\n\n\nfunction isSelfDescribingJson(input) {\n  var sdj = input;\n  if (isNonEmptyJson(sdj)) if ('schema' in sdj && 'data' in sdj) return typeof sdj.schema === 'string' && typeof sdj.data === 'object';\n  return false;\n}\n/**\n * Validates if the input object contains the expected properties of a ruleset\n * @param input - The object containing a rule set\n * @returns True if a valid rule set\n */\n\n\nfunction isRuleSet(input) {\n  var ruleSet = input;\n  var ruleCount = 0;\n\n  if (input != null && typeof input === 'object' && !Array.isArray(input)) {\n    if (Object.prototype.hasOwnProperty.call(ruleSet, 'accept')) {\n      if (isValidRuleSetArg(ruleSet['accept'])) {\n        ruleCount += 1;\n      } else {\n        return false;\n      }\n    }\n\n    if (Object.prototype.hasOwnProperty.call(ruleSet, 'reject')) {\n      if (isValidRuleSetArg(ruleSet['reject'])) {\n        ruleCount += 1;\n      } else {\n        return false;\n      }\n    } // if either 'reject' or 'accept' or both exists,\n    // we have a valid ruleset\n\n\n    return ruleCount > 0 && ruleCount <= 2;\n  }\n\n  return false;\n}\n/**\n * Validates if the function can be a valid context generator function\n * @param input - The function to be validated\n */\n\n\nfunction isContextCallbackFunction(input) {\n  return typeof input === 'function' && input.length <= 1;\n}\n/**\n * Validates if the function can be a valid context primitive function or self describing json\n * @param input - The function or orbject to be validated\n * @returns True if either a Context Generator or Self Describing JSON\n */\n\n\nfunction isContextPrimitive(input) {\n  return isContextCallbackFunction(input) || isSelfDescribingJson(input);\n}\n/**\n * Validates if an array is a valid shape to be a Filter Provider\n * @param input - The Array of Context filter callbacks\n */\n\n\nfunction isFilterProvider(input) {\n  if (Array.isArray(input)) {\n    if (input.length === 2) {\n      if (Array.isArray(input[1])) {\n        return isContextCallbackFunction(input[0]) && input[1].every(isContextPrimitive);\n      }\n\n      return isContextCallbackFunction(input[0]) && isContextPrimitive(input[1]);\n    }\n  }\n\n  return false;\n}\n/**\n * Validates if an array is a valid shape to be an array of rule sets\n * @param input - The Array of Rule Sets\n */\n\n\nfunction isRuleSetProvider(input) {\n  if (Array.isArray(input) && input.length === 2) {\n    if (!isRuleSet(input[0])) return false;\n    if (Array.isArray(input[1])) return input[1].every(isContextPrimitive);\n    return isContextPrimitive(input[1]);\n  }\n\n  return false;\n}\n/**\n * Checks if an input array is either a filter provider or a rule set provider\n * @param input - An array of filter providers or rule set providers\n * @returns Whether the array is a valid {@link ConditionalContextProvider}\n */\n\n\nfunction isConditionalContextProvider(input) {\n  return isFilterProvider(input) || isRuleSetProvider(input);\n}\n/**\n * Checks if a given schema matches any rules within the provided rule set\n * @param ruleSet - The rule set containing rules to match schema against\n * @param schema - The schema to be matched against the rule set\n */\n\n\nfunction matchSchemaAgainstRuleSet(ruleSet, schema) {\n  var rejectCount = 0;\n  var acceptCount = 0;\n  var acceptRules = ruleSet['accept'];\n\n  if (Array.isArray(acceptRules)) {\n    if (ruleSet.accept.some(function (rule) {\n      return matchSchemaAgainstRule(rule, schema);\n    })) {\n      acceptCount++;\n    }\n  } else if (typeof acceptRules === 'string') {\n    if (matchSchemaAgainstRule(acceptRules, schema)) {\n      acceptCount++;\n    }\n  }\n\n  var rejectRules = ruleSet['reject'];\n\n  if (Array.isArray(rejectRules)) {\n    if (ruleSet.reject.some(function (rule) {\n      return matchSchemaAgainstRule(rule, schema);\n    })) {\n      rejectCount++;\n    }\n  } else if (typeof rejectRules === 'string') {\n    if (matchSchemaAgainstRule(rejectRules, schema)) {\n      rejectCount++;\n    }\n  }\n\n  if (acceptCount > 0 && rejectCount === 0) {\n    return true;\n  } else if (acceptCount === 0 && rejectCount > 0) {\n    return false;\n  }\n\n  return false;\n}\n/**\n * Checks if a given schema matches a specific rule from a rule set\n * @param rule - The rule to match schema against\n * @param schema - The schema to be matched against the rule\n */\n\n\nfunction matchSchemaAgainstRule(rule, schema) {\n  if (!isValidRule(rule)) return false;\n  var ruleParts = getRuleParts(rule);\n  var schemaParts = getSchemaParts(schema);\n\n  if (ruleParts && schemaParts) {\n    if (!matchVendor(ruleParts[0], schemaParts[0])) return false;\n\n    for (var i = 1; i < 5; i++) {\n      if (!matchPart(ruleParts[i], schemaParts[i])) return false;\n    }\n\n    return true; // if it hasn't failed, it passes\n  }\n\n  return false;\n}\n\nfunction matchVendor(rule, vendor) {\n  // rule and vendor must have same number of elements\n  var vendorParts = vendor.split('.');\n  var ruleParts = rule.split('.');\n\n  if (vendorParts && ruleParts) {\n    if (vendorParts.length !== ruleParts.length) return false;\n\n    for (var i = 0; i < ruleParts.length; i++) {\n      if (!matchPart(vendorParts[i], ruleParts[i])) return false;\n    }\n\n    return true;\n  }\n\n  return false;\n}\n\nfunction matchPart(rule, schema) {\n  // parts should be the string nested between slashes in the URI: /example/\n  return rule && schema && rule === '*' || rule === schema;\n} // Returns the \"useful\" schema, i.e. what would someone want to use to identify events.\n// For some events this is the 'e' property but for unstructured events, this is the\n// 'schema' from the 'ue_px' field.\n\n\nfunction getUsefulSchema(sb) {\n  var eventJson = sb.getJson();\n\n  for (var _i = 0, eventJson_1 = eventJson; _i < eventJson_1.length; _i++) {\n    var json = eventJson_1[_i];\n\n    if (json.keyIfEncoded === 'ue_px' && typeof json.json['data'] === 'object') {\n      var schema = json.json['data']['schema'];\n\n      if (typeof schema == 'string') {\n        return schema;\n      }\n    }\n  }\n\n  return '';\n}\n\nfunction getEventType(payloadBuilder) {\n  var eventType = payloadBuilder.getPayload()['e'];\n  return typeof eventType === 'string' ? eventType : '';\n}\n\nfunction buildGenerator(generator, event, eventType, eventSchema) {\n  var contextGeneratorResult = undefined;\n\n  try {\n    // try to evaluate context generator\n    var args = {\n      event: event.getPayload(),\n      eventType: eventType,\n      eventSchema: eventSchema\n    };\n    contextGeneratorResult = generator(args); // determine if the produced result is a valid SDJ\n\n    if (Array.isArray(contextGeneratorResult) && contextGeneratorResult.every(isSelfDescribingJson)) {\n      return contextGeneratorResult;\n    } else if (isSelfDescribingJson(contextGeneratorResult)) {\n      return contextGeneratorResult;\n    } else {\n      return undefined;\n    }\n  } catch (error) {\n    contextGeneratorResult = undefined;\n  }\n\n  return contextGeneratorResult;\n}\n\nfunction normalizeToArray(input) {\n  if (Array.isArray(input)) {\n    return input;\n  }\n\n  return Array.of(input);\n}\n\nfunction generatePrimitives(contextPrimitives, event, eventType, eventSchema) {\n  var _a;\n\n  var normalizedInputs = normalizeToArray(contextPrimitives);\n\n  var partialEvaluate = function (primitive) {\n    var result = evaluatePrimitive(primitive, event, eventType, eventSchema);\n\n    if (result && result.length !== 0) {\n      return result;\n    }\n\n    return undefined;\n  };\n\n  var generatedContexts = normalizedInputs.map(partialEvaluate);\n  return (_a = []).concat.apply(_a, generatedContexts.filter(function (c) {\n    return c != null && c.filter(Boolean);\n  }));\n}\n\nfunction evaluatePrimitive(contextPrimitive, event, eventType, eventSchema) {\n  if (isSelfDescribingJson(contextPrimitive)) {\n    return [contextPrimitive];\n  } else if (isContextCallbackFunction(contextPrimitive)) {\n    var generatorOutput = buildGenerator(contextPrimitive, event, eventType, eventSchema);\n\n    if (isSelfDescribingJson(generatorOutput)) {\n      return [generatorOutput];\n    } else if (Array.isArray(generatorOutput)) {\n      return generatorOutput;\n    }\n  }\n\n  return undefined;\n}\n\nfunction evaluateProvider(provider, event, eventType, eventSchema) {\n  if (isFilterProvider(provider)) {\n    var filter = provider[0];\n    var filterResult = false;\n\n    try {\n      var args = {\n        event: event.getPayload(),\n        eventType: eventType,\n        eventSchema: eventSchema\n      };\n      filterResult = filter(args);\n    } catch (error) {\n      filterResult = false;\n    }\n\n    if (filterResult === true) {\n      return generatePrimitives(provider[1], event, eventType, eventSchema);\n    }\n  } else if (isRuleSetProvider(provider)) {\n    if (matchSchemaAgainstRuleSet(provider[0], eventSchema)) {\n      return generatePrimitives(provider[1], event, eventType, eventSchema);\n    }\n  }\n\n  return [];\n}\n\nfunction generateConditionals(providers, event, eventType, eventSchema) {\n  var _a;\n\n  var normalizedInput = normalizeToArray(providers);\n\n  var partialEvaluate = function (provider) {\n    var result = evaluateProvider(provider, event, eventType, eventSchema);\n\n    if (result && result.length !== 0) {\n      return result;\n    }\n\n    return undefined;\n  };\n\n  var generatedContexts = normalizedInput.map(partialEvaluate);\n  return (_a = []).concat.apply(_a, generatedContexts.filter(function (c) {\n    return c != null && c.filter(Boolean);\n  }));\n}\n/*\n * Copyright (c) 2021 Snowplow Analytics Ltd, 2010 Anthon Pang\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are met:\n *\n * 1. Redistributions of source code must retain the above copyright notice, this\n *    list of conditions and the following disclaimer.\n *\n * 2. Redistributions in binary form must reproduce the above copyright notice,\n *    this list of conditions and the following disclaimer in the documentation\n *    and/or other materials provided with the distribution.\n *\n * 3. Neither the name of the copyright holder nor the names of its\n *    contributors may be used to endorse or promote products derived from\n *    this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\n * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\n * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\n * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\n/**\n * Transform optional/old-behavior number timestamp into`Timestamp` ADT\n *\n * @param timestamp - optional number or timestamp object\n * @returns correct timestamp object\n */\n\n\nfunction getTimestamp(timestamp) {\n  if (timestamp == null) {\n    return {\n      type: 'dtm',\n      value: new Date().getTime()\n    };\n  } else if (typeof timestamp === 'number') {\n    return {\n      type: 'dtm',\n      value: timestamp\n    };\n  } else if (timestamp.type === 'ttm') {\n    // We can return timestamp here, but this is safer fallback\n    return {\n      type: 'ttm',\n      value: timestamp.value\n    };\n  } else {\n    return {\n      type: 'dtm',\n      value: timestamp.value || new Date().getTime()\n    };\n  }\n}\n/**\n * Create a tracker core object\n *\n * @param base64 - Whether to base 64 encode contexts and self describing event JSONs\n * @param corePlugins - The core plugins to be processed with each event\n * @param callback - Function applied to every payload dictionary object\n * @return Tracker core\n */\n\n\nfunction trackerCore(configuration) {\n  if (configuration === void 0) {\n    configuration = {};\n  }\n\n  function newCore(base64, corePlugins, callback) {\n    var pluginContextsHelper = pluginContexts(corePlugins),\n        globalContextsHelper = globalContexts();\n    var encodeBase64 = base64,\n        payloadPairs = {}; // Dictionary of key-value pairs which get added to every payload, e.g. tracker version\n\n    /**\n     * Wraps an array of custom contexts in a self-describing JSON\n     *\n     * @param contexts - Array of custom context self-describing JSONs\n     * @return Outer JSON\n     */\n\n    function completeContexts(contexts) {\n      if (contexts && contexts.length) {\n        return {\n          schema: 'iglu:com.snowplowanalytics.snowplow/contexts/jsonschema/1-0-0',\n          data: contexts\n        };\n      }\n\n      return undefined;\n    }\n    /**\n     * Adds all global contexts to a contexts array\n     *\n     * @param pb - PayloadData\n     * @param contexts - Custom contexts relating to the event\n     */\n\n\n    function attachGlobalContexts(pb, contexts) {\n      var applicableContexts = globalContextsHelper.getApplicableContexts(pb);\n      var returnedContexts = [];\n\n      if (contexts && contexts.length) {\n        returnedContexts.push.apply(returnedContexts, contexts);\n      }\n\n      if (applicableContexts && applicableContexts.length) {\n        returnedContexts.push.apply(returnedContexts, applicableContexts);\n      }\n\n      return returnedContexts;\n    }\n    /**\n     * Gets called by every trackXXX method\n     * Adds context and payloadPairs name-value pairs to the payload\n     * Applies the callback to the built payload\n     *\n     * @param pb - Payload\n     * @param context - Custom contexts relating to the event\n     * @param timestamp - Timestamp of the event\n     * @return Payload after the callback is applied\n     */\n\n\n    function track(pb, context, timestamp) {\n      pb.withJsonProcessor(payloadJsonProcessor(encodeBase64));\n      pb.add('eid', v4());\n      pb.addDict(payloadPairs);\n      var tstamp = getTimestamp(timestamp);\n      pb.add(tstamp.type, tstamp.value.toString());\n      var allContexts = attachGlobalContexts(pb, pluginContextsHelper.addPluginContexts(context));\n      var wrappedContexts = completeContexts(allContexts);\n\n      if (wrappedContexts !== undefined) {\n        pb.addJson('cx', 'co', wrappedContexts);\n      }\n\n      corePlugins.forEach(function (plugin) {\n        try {\n          if (plugin.beforeTrack) {\n            plugin.beforeTrack(pb);\n          }\n        } catch (ex) {\n          LOG.error('Plugin beforeTrack', ex);\n        }\n      });\n\n      if (typeof callback === 'function') {\n        callback(pb);\n      }\n\n      var finalPayload = pb.build();\n      corePlugins.forEach(function (plugin) {\n        try {\n          if (plugin.afterTrack) {\n            plugin.afterTrack(finalPayload);\n          }\n        } catch (ex) {\n          LOG.error('Plugin afterTrack', ex);\n        }\n      });\n      return finalPayload;\n    }\n    /**\n     * Set a persistent key-value pair to be added to every payload\n     *\n     * @param key - Field name\n     * @param value - Field value\n     */\n\n\n    function addPayloadPair(key, value) {\n      payloadPairs[key] = value;\n    }\n\n    var core = {\n      track: track,\n      addPayloadPair: addPayloadPair,\n      getBase64Encoding: function () {\n        return encodeBase64;\n      },\n      setBase64Encoding: function (encode) {\n        encodeBase64 = encode;\n      },\n      addPayloadDict: function (dict) {\n        for (var key in dict) {\n          if (Object.prototype.hasOwnProperty.call(dict, key)) {\n            payloadPairs[key] = dict[key];\n          }\n        }\n      },\n      resetPayloadPairs: function (dict) {\n        payloadPairs = isJson(dict) ? dict : {};\n      },\n      setTrackerVersion: function (version) {\n        addPayloadPair('tv', version);\n      },\n      setTrackerNamespace: function (name) {\n        addPayloadPair('tna', name);\n      },\n      setAppId: function (appId) {\n        addPayloadPair('aid', appId);\n      },\n      setPlatform: function (value) {\n        addPayloadPair('p', value);\n      },\n      setUserId: function (userId) {\n        addPayloadPair('uid', userId);\n      },\n      setScreenResolution: function (width, height) {\n        addPayloadPair('res', width + 'x' + height);\n      },\n      setViewport: function (width, height) {\n        addPayloadPair('vp', width + 'x' + height);\n      },\n      setColorDepth: function (depth) {\n        addPayloadPair('cd', depth);\n      },\n      setTimezone: function (timezone) {\n        addPayloadPair('tz', timezone);\n      },\n      setLang: function (lang) {\n        addPayloadPair('lang', lang);\n      },\n      setIpAddress: function (ip) {\n        addPayloadPair('ip', ip);\n      },\n      setUseragent: function (useragent) {\n        addPayloadPair('ua', useragent);\n      },\n      addGlobalContexts: function (contexts) {\n        globalContextsHelper.addGlobalContexts(contexts);\n      },\n      clearGlobalContexts: function () {\n        globalContextsHelper.clearGlobalContexts();\n      },\n      removeGlobalContexts: function (contexts) {\n        globalContextsHelper.removeGlobalContexts(contexts);\n      }\n    };\n    return core;\n  }\n\n  var base64 = configuration.base64,\n      corePlugins = configuration.corePlugins,\n      callback = configuration.callback,\n      plugins = corePlugins !== null && corePlugins !== void 0 ? corePlugins : [],\n      partialCore = newCore(base64 !== null && base64 !== void 0 ? base64 : true, plugins, callback),\n      core = __assign(__assign({}, partialCore), {\n    addPlugin: function (configuration) {\n      var _a, _b;\n\n      var plugin = configuration.plugin;\n      plugins.push(plugin);\n      (_a = plugin.logger) === null || _a === void 0 ? void 0 : _a.call(plugin, LOG);\n      (_b = plugin.activateCorePlugin) === null || _b === void 0 ? void 0 : _b.call(plugin, core);\n    }\n  });\n\n  plugins === null || plugins === void 0 ? void 0 : plugins.forEach(function (plugin) {\n    var _a, _b;\n\n    (_a = plugin.logger) === null || _a === void 0 ? void 0 : _a.call(plugin, LOG);\n    (_b = plugin.activateCorePlugin) === null || _b === void 0 ? void 0 : _b.call(plugin, core);\n  });\n  return core;\n}\n/**\n * Build a self-describing event\n * A custom event type, allowing for an event to be tracked using your own custom schema\n * and a data object which conforms to the supplied schema\n *\n * @param event - Contains the properties and schema location for the event\n * @return PayloadBuilder to be sent to {@link Core.track()}\n */\n\n\nfunction buildSelfDescribingEvent(event) {\n  var _a = event.event,\n      schema = _a.schema,\n      data = _a.data,\n      pb = payloadBuilder();\n  var ueJson = {\n    schema: 'iglu:com.snowplowanalytics.snowplow/unstruct_event/jsonschema/1-0-0',\n    data: {\n      schema: schema,\n      data: data\n    }\n  };\n  pb.add('e', 'ue');\n  pb.addJson('ue_px', 'ue_pr', ueJson);\n  return pb;\n}\n/**\n * Build a Page View Event\n * Represents a Page View, which is typically fired as soon as possible when a web page\n * is loaded within the users browser. Often also fired on \"virtual page views\" within\n * Single Page Applications (SPA).\n *\n * @param event - Contains the properties for the Page View event\n * @return PayloadBuilder to be sent to {@link Core.track()}\n */\n\n\nfunction buildPageView(event) {\n  var pageUrl = event.pageUrl,\n      pageTitle = event.pageTitle,\n      referrer = event.referrer,\n      pb = payloadBuilder();\n  pb.add('e', 'pv'); // 'pv' for Page View\n\n  pb.add('url', pageUrl);\n  pb.add('page', pageTitle);\n  pb.add('refr', referrer);\n  return pb;\n}\n/**\n * Build a Page Ping Event\n * Fires when activity tracking is enabled in the browser.\n * Tracks same information as the last tracked Page View and includes scroll\n * information from the current page view\n *\n * @param event - Contains the properties for the Page Ping event\n * @return PayloadBuilder to be sent to {@link Core.track()}\n */\n\n\nfunction buildPagePing(event) {\n  var pageUrl = event.pageUrl,\n      pageTitle = event.pageTitle,\n      referrer = event.referrer,\n      minXOffset = event.minXOffset,\n      maxXOffset = event.maxXOffset,\n      minYOffset = event.minYOffset,\n      maxYOffset = event.maxYOffset,\n      pb = payloadBuilder();\n  pb.add('e', 'pp'); // 'pp' for Page Ping\n\n  pb.add('url', pageUrl);\n  pb.add('page', pageTitle);\n  pb.add('refr', referrer);\n  if (minXOffset && !isNaN(Number(minXOffset))) pb.add('pp_mix', minXOffset.toString());\n  if (maxXOffset && !isNaN(Number(maxXOffset))) pb.add('pp_max', maxXOffset.toString());\n  if (minYOffset && !isNaN(Number(minYOffset))) pb.add('pp_miy', minYOffset.toString());\n  if (maxYOffset && !isNaN(Number(maxYOffset))) pb.add('pp_may', maxYOffset.toString());\n  return pb;\n}\n/**\n * Build a Structured Event\n * A classic style of event tracking, allows for easier movement between analytics\n * systems. A loosely typed event, creating a Self Describing event is preferred, but\n * useful for interoperability.\n *\n * @param event - Contains the properties for the Structured event\n * @return PayloadBuilder to be sent to {@link Core.track()}\n */\n\n\nfunction buildStructEvent(event) {\n  var category = event.category,\n      action = event.action,\n      label = event.label,\n      property = event.property,\n      value = event.value,\n      pb = payloadBuilder();\n  pb.add('e', 'se'); // 'se' for Structured Event\n\n  pb.add('se_ca', category);\n  pb.add('se_ac', action);\n  pb.add('se_la', label);\n  pb.add('se_pr', property);\n  pb.add('se_va', value == null ? undefined : value.toString());\n  return pb;\n}\n/**\n * Build an Ecommerce Transaction Event\n * Allows for tracking common ecommerce events, this event is usually used when\n * a consumer completes a transaction.\n *\n * @param event - Contains the properties for the Ecommerce Transactoion event\n * @return PayloadBuilder to be sent to {@link Core.track()}\n */\n\n\nfunction buildEcommerceTransaction(event) {\n  var orderId = event.orderId,\n      total = event.total,\n      affiliation = event.affiliation,\n      tax = event.tax,\n      shipping = event.shipping,\n      city = event.city,\n      state = event.state,\n      country = event.country,\n      currency = event.currency,\n      pb = payloadBuilder();\n  pb.add('e', 'tr'); // 'tr' for Transaction\n\n  pb.add('tr_id', orderId);\n  pb.add('tr_af', affiliation);\n  pb.add('tr_tt', total);\n  pb.add('tr_tx', tax);\n  pb.add('tr_sh', shipping);\n  pb.add('tr_ci', city);\n  pb.add('tr_st', state);\n  pb.add('tr_co', country);\n  pb.add('tr_cu', currency);\n  return pb;\n}\n/**\n * Build an Ecommerce Transaction Item Event\n * Related to the {@link buildEcommerceTransaction}\n * Each Ecommerce Transaction may contain one or more EcommerceTransactionItem events\n *\n * @param event - Contains the properties for the Ecommerce Transaction Item event\n * @return PayloadBuilder to be sent to {@link Core.track()}\n */\n\n\nfunction buildEcommerceTransactionItem(event) {\n  var orderId = event.orderId,\n      sku = event.sku,\n      price = event.price,\n      name = event.name,\n      category = event.category,\n      quantity = event.quantity,\n      currency = event.currency,\n      pb = payloadBuilder();\n  pb.add('e', 'ti'); // 'tr' for Transaction Item\n\n  pb.add('ti_id', orderId);\n  pb.add('ti_sk', sku);\n  pb.add('ti_nm', name);\n  pb.add('ti_ca', category);\n  pb.add('ti_pr', price);\n  pb.add('ti_qu', quantity);\n  pb.add('ti_cu', currency);\n  return pb;\n}\n/**\n * Build a Scren View Event\n * Similar to a Page View but less focused on typical web properties\n * Often used for mobile applications as the user is presented with\n * new views as they performance navigation events\n *\n * @param event - Contains the properties for the Screen View event. One or more properties must be included.\n * @return PayloadBuilder to be sent to {@link Core.track()}\n */\n\n\nfunction buildScreenView(event) {\n  var name = event.name,\n      id = event.id;\n  return buildSelfDescribingEvent({\n    event: {\n      schema: 'iglu:com.snowplowanalytics.snowplow/screen_view/jsonschema/1-0-0',\n      data: removeEmptyProperties({\n        name: name,\n        id: id\n      })\n    }\n  });\n}\n/**\n * Build a Link Click Event\n * Used when a user clicks on a link on a webpage, typically an anchor tag <a>\n *\n * @param event - Contains the properties for the Link Click event\n * @return PayloadBuilder to be sent to {@link Core.track()}\n */\n\n\nfunction buildLinkClick(event) {\n  var targetUrl = event.targetUrl,\n      elementId = event.elementId,\n      elementClasses = event.elementClasses,\n      elementTarget = event.elementTarget,\n      elementContent = event.elementContent;\n  var eventJson = {\n    schema: 'iglu:com.snowplowanalytics.snowplow/link_click/jsonschema/1-0-1',\n    data: removeEmptyProperties({\n      targetUrl: targetUrl,\n      elementId: elementId,\n      elementClasses: elementClasses,\n      elementTarget: elementTarget,\n      elementContent: elementContent\n    })\n  };\n  return buildSelfDescribingEvent({\n    event: eventJson\n  });\n}\n/**\n * Build a Ad Impression Event\n * Used to track an advertisement impression\n *\n * @remark\n * If you provide the cost field, you must also provide one of 'cpa', 'cpc', and 'cpm' for the costModel field.\n *\n * @param event - Contains the properties for the Ad Impression event\n * @return PayloadBuilder to be sent to {@link Core.track()}\n */\n\n\nfunction buildAdImpression(event) {\n  var impressionId = event.impressionId,\n      costModel = event.costModel,\n      cost = event.cost,\n      targetUrl = event.targetUrl,\n      bannerId = event.bannerId,\n      zoneId = event.zoneId,\n      advertiserId = event.advertiserId,\n      campaignId = event.campaignId;\n  var eventJson = {\n    schema: 'iglu:com.snowplowanalytics.snowplow/ad_impression/jsonschema/1-0-0',\n    data: removeEmptyProperties({\n      impressionId: impressionId,\n      costModel: costModel,\n      cost: cost,\n      targetUrl: targetUrl,\n      bannerId: bannerId,\n      zoneId: zoneId,\n      advertiserId: advertiserId,\n      campaignId: campaignId\n    })\n  };\n  return buildSelfDescribingEvent({\n    event: eventJson\n  });\n}\n/**\n * Build a Ad Click Event\n * Used to track an advertisement click\n *\n * @remark\n * If you provide the cost field, you must also provide one of 'cpa', 'cpc', and 'cpm' for the costModel field.\n *\n * @param event - Contains the properties for the Ad Click event\n * @return PayloadBuilder to be sent to {@link Core.track()}\n */\n\n\nfunction buildAdClick(event) {\n  var targetUrl = event.targetUrl,\n      clickId = event.clickId,\n      costModel = event.costModel,\n      cost = event.cost,\n      bannerId = event.bannerId,\n      zoneId = event.zoneId,\n      impressionId = event.impressionId,\n      advertiserId = event.advertiserId,\n      campaignId = event.campaignId;\n  var eventJson = {\n    schema: 'iglu:com.snowplowanalytics.snowplow/ad_click/jsonschema/1-0-0',\n    data: removeEmptyProperties({\n      targetUrl: targetUrl,\n      clickId: clickId,\n      costModel: costModel,\n      cost: cost,\n      bannerId: bannerId,\n      zoneId: zoneId,\n      impressionId: impressionId,\n      advertiserId: advertiserId,\n      campaignId: campaignId\n    })\n  };\n  return buildSelfDescribingEvent({\n    event: eventJson\n  });\n}\n/**\n * Build a Ad Conversion Event\n * Used to track an advertisement click\n *\n * @remark\n * If you provide the cost field, you must also provide one of 'cpa', 'cpc', and 'cpm' for the costModel field.\n *\n * @param event - Contains the properties for the Ad Conversion event\n * @return PayloadBuilder to be sent to {@link Core.track()}\n */\n\n\nfunction buildAdConversion(event) {\n  var conversionId = event.conversionId,\n      costModel = event.costModel,\n      cost = event.cost,\n      category = event.category,\n      action = event.action,\n      property = event.property,\n      initialValue = event.initialValue,\n      advertiserId = event.advertiserId,\n      campaignId = event.campaignId;\n  var eventJson = {\n    schema: 'iglu:com.snowplowanalytics.snowplow/ad_conversion/jsonschema/1-0-0',\n    data: removeEmptyProperties({\n      conversionId: conversionId,\n      costModel: costModel,\n      cost: cost,\n      category: category,\n      action: action,\n      property: property,\n      initialValue: initialValue,\n      advertiserId: advertiserId,\n      campaignId: campaignId\n    })\n  };\n  return buildSelfDescribingEvent({\n    event: eventJson\n  });\n}\n/**\n * Build a Social Interaction Event\\\n * Social tracking will be used to track the way users interact\n * with Facebook, Twitter and Google + widgets\n * e.g. to capture “like this” or “tweet this” events.\n *\n * @param event - Contains the properties for the Social Interaction event\n * @return PayloadBuilder to be sent to {@link Core.track()}\n */\n\n\nfunction buildSocialInteraction(event) {\n  var action = event.action,\n      network = event.network,\n      target = event.target;\n  var eventJson = {\n    schema: 'iglu:com.snowplowanalytics.snowplow/social_interaction/jsonschema/1-0-0',\n    data: removeEmptyProperties({\n      action: action,\n      network: network,\n      target: target\n    })\n  };\n  return buildSelfDescribingEvent({\n    event: eventJson\n  });\n}\n/**\n * Build a Add To Cart Event\n * For tracking users adding items from a cart\n * on an ecommerce site.\n *\n * @param event - Contains the properties for the Add To Cart event\n * @return PayloadBuilder to be sent to {@link Core.track()}\n */\n\n\nfunction buildAddToCart(event) {\n  var sku = event.sku,\n      quantity = event.quantity,\n      name = event.name,\n      category = event.category,\n      unitPrice = event.unitPrice,\n      currency = event.currency;\n  return buildSelfDescribingEvent({\n    event: {\n      schema: 'iglu:com.snowplowanalytics.snowplow/add_to_cart/jsonschema/1-0-0',\n      data: removeEmptyProperties({\n        sku: sku,\n        quantity: quantity,\n        name: name,\n        category: category,\n        unitPrice: unitPrice,\n        currency: currency\n      })\n    }\n  });\n}\n/**\n * Build a Remove From Cart Event\n * For tracking users removing items from a cart\n * on an ecommerce site.\n *\n * @param event - Contains the properties for the Remove From Cart event\n * @return PayloadBuilder to be sent to {@link Core.track()}\n */\n\n\nfunction buildRemoveFromCart(event) {\n  var sku = event.sku,\n      quantity = event.quantity,\n      name = event.name,\n      category = event.category,\n      unitPrice = event.unitPrice,\n      currency = event.currency;\n  return buildSelfDescribingEvent({\n    event: {\n      schema: 'iglu:com.snowplowanalytics.snowplow/remove_from_cart/jsonschema/1-0-0',\n      data: removeEmptyProperties({\n        sku: sku,\n        quantity: quantity,\n        name: name,\n        category: category,\n        unitPrice: unitPrice,\n        currency: currency\n      })\n    }\n  });\n}\n/**\n * Build a Form Focus or Change Form Event based on schema property\n * When a user focuses on a form element or when a user makes a\n * change to a form element.\n *\n * @param event - Contains the properties for the Form Focus or Change Form event\n * @return PayloadBuilder to be sent to {@link Core.track()}\n */\n\n\nfunction buildFormFocusOrChange(event) {\n  var event_schema = '';\n  var schema = event.schema,\n      formId = event.formId,\n      elementId = event.elementId,\n      nodeName = event.nodeName,\n      elementClasses = event.elementClasses,\n      value = event.value,\n      type = event.type;\n  var event_data = {\n    formId: formId,\n    elementId: elementId,\n    nodeName: nodeName,\n    elementClasses: elementClasses,\n    value: value\n  };\n\n  if (schema === 'change_form') {\n    event_schema = 'iglu:com.snowplowanalytics.snowplow/change_form/jsonschema/1-0-0';\n    event_data.type = type;\n  } else if (schema === 'focus_form') {\n    event_schema = 'iglu:com.snowplowanalytics.snowplow/focus_form/jsonschema/1-0-0';\n    event_data.elementType = type;\n  }\n\n  return buildSelfDescribingEvent({\n    event: {\n      schema: event_schema,\n      data: removeEmptyProperties(event_data, {\n        value: true\n      })\n    }\n  });\n}\n/**\n * Build a Form Submission Event\n * Used to track when a user submits a form\n *\n * @param event - Contains the properties for the Form Submission event\n * @return PayloadBuilder to be sent to {@link Core.track()}\n */\n\n\nfunction buildFormSubmission(event) {\n  var formId = event.formId,\n      formClasses = event.formClasses,\n      elements = event.elements;\n  return buildSelfDescribingEvent({\n    event: {\n      schema: 'iglu:com.snowplowanalytics.snowplow/submit_form/jsonschema/1-0-0',\n      data: removeEmptyProperties({\n        formId: formId,\n        formClasses: formClasses,\n        elements: elements\n      })\n    }\n  });\n}\n/**\n * Build a Site Search Event\n * Used when a user performs a search action on a page\n *\n * @param event - Contains the properties for the Site Search event\n * @return PayloadBuilder to be sent to {@link Core.track()}\n */\n\n\nfunction buildSiteSearch(event) {\n  var terms = event.terms,\n      filters = event.filters,\n      totalResults = event.totalResults,\n      pageResults = event.pageResults;\n  return buildSelfDescribingEvent({\n    event: {\n      schema: 'iglu:com.snowplowanalytics.snowplow/site_search/jsonschema/1-0-0',\n      data: removeEmptyProperties({\n        terms: terms,\n        filters: filters,\n        totalResults: totalResults,\n        pageResults: pageResults\n      })\n    }\n  });\n}\n/**\n * Build a Consent Withdrawn Event\n * Used for tracking when a user withdraws their consent\n *\n * @param event - Contains the properties for the Consent Withdrawn event\n * @return An object containing the PayloadBuilder to be sent to {@link Core.track()} and a 'consent_document' context\n */\n\n\nfunction buildConsentWithdrawn(event) {\n  var all = event.all,\n      id = event.id,\n      version = event.version,\n      name = event.name,\n      description = event.description;\n  var documentJson = {\n    schema: 'iglu:com.snowplowanalytics.snowplow/consent_document/jsonschema/1-0-0',\n    data: removeEmptyProperties({\n      id: id,\n      version: version,\n      name: name,\n      description: description\n    })\n  };\n  return {\n    event: buildSelfDescribingEvent({\n      event: {\n        schema: 'iglu:com.snowplowanalytics.snowplow/consent_withdrawn/jsonschema/1-0-0',\n        data: removeEmptyProperties({\n          all: all\n        })\n      }\n    }),\n    context: [documentJson]\n  };\n}\n/**\n * Build a Consent Granted Event\n * Used for tracking when a user grants their consent\n *\n * @param event - Contains the properties for the Consent Granted event\n * @return An object containing the PayloadBuilder to be sent to {@link Core.track()} and a 'consent_document' context\n */\n\n\nfunction buildConsentGranted(event) {\n  var expiry = event.expiry,\n      id = event.id,\n      version = event.version,\n      name = event.name,\n      description = event.description;\n  var documentJson = {\n    schema: 'iglu:com.snowplowanalytics.snowplow/consent_document/jsonschema/1-0-0',\n    data: removeEmptyProperties({\n      id: id,\n      version: version,\n      name: name,\n      description: description\n    })\n  };\n  return {\n    event: buildSelfDescribingEvent({\n      event: {\n        schema: 'iglu:com.snowplowanalytics.snowplow/consent_granted/jsonschema/1-0-0',\n        data: removeEmptyProperties({\n          expiry: expiry\n        })\n      }\n    }),\n    context: [documentJson]\n  };\n}\n/**\n * Returns a copy of a JSON with undefined and null properties removed\n *\n * @param event - JSON object to clean\n * @param exemptFields - Set of fields which should not be removed even if empty\n * @return A cleaned copy of eventJson\n */\n\n\nfunction removeEmptyProperties(event, exemptFields) {\n  if (exemptFields === void 0) {\n    exemptFields = {};\n  }\n\n  var ret = {};\n\n  for (var k in event) {\n    if (exemptFields[k] || event[k] !== null && typeof event[k] !== 'undefined') {\n      ret[k] = event[k];\n    }\n  }\n\n  return ret;\n}\n/*\n * Copyright (c) 2021 Snowplow Analytics Ltd, 2010 Anthon Pang\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are met:\n *\n * 1. Redistributions of source code must retain the above copyright notice, this\n *    list of conditions and the following disclaimer.\n *\n * 2. Redistributions in binary form must reproduce the above copyright notice,\n *    this list of conditions and the following disclaimer in the documentation\n *    and/or other materials provided with the distribution.\n *\n * 3. Neither the name of the copyright holder nor the names of its\n *    contributors may be used to endorse or promote products derived from\n *    this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\n * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\n * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\n * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\n\nvar version = version$1;\nexport { LOG, LOG_LEVEL, buildAdClick, buildAdConversion, buildAdImpression, buildAddToCart, buildConsentGranted, buildConsentWithdrawn, buildEcommerceTransaction, buildEcommerceTransactionItem, buildFormFocusOrChange, buildFormSubmission, buildLinkClick, buildPagePing, buildPageView, buildRemoveFromCart, buildScreenView, buildSelfDescribingEvent, buildSiteSearch, buildSocialInteraction, buildStructEvent, getRuleParts, getSchemaParts, globalContexts, isConditionalContextProvider, isContextCallbackFunction, isContextPrimitive, isFilterProvider, isJson, isNonEmptyJson, isRuleSet, isRuleSetProvider, isSelfDescribingJson, isStringArray, isValidRule, isValidRuleSetArg, matchSchemaAgainstRule, matchSchemaAgainstRuleSet, payloadBuilder, payloadJsonProcessor, pluginContexts, resolveDynamicContext, trackerCore, validateVendor, validateVendorParts, version };","map":{"version":3,"sources":["../src/base64.ts","../src/payload.ts","../src/logger.ts","../src/contexts.ts","../src/core.ts","../src/index.ts"],"names":["uuid","v"],"mappings":"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","sourcesContent":["/*\n * Copyright (c) 2013 Kevin van Zonneveld (http://kvz.io)\n * and Contributors (http://phpjs.org/authors)\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy of\n * this software and associated documentation files (the \"Software\"), to deal in\n * the Software without restriction, including without limitation the rights to\n * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\n * of the Software, and to permit persons to whom the Software is furnished to do\n * so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n// Deprecated and removed in TypeScript\ndeclare function unescape(s: string): string;\n\n/**\n * Decodes a url safe Base 64 encoded string\n * @remark See: {@link http://tools.ietf.org/html/rfc4648#page-7}\n * @param data - String to decode\n * @returns The decoded string\n */\nexport function base64urldecode(data: string): string {\n  if (!data) {\n    return data;\n  }\n  const padding = 4 - (data.length % 4);\n  switch (padding) {\n    case 2:\n      data += '==';\n      break;\n    case 3:\n      data += '=';\n      break;\n  }\n  const b64Data = data.replace(/-/g, '+').replace(/_/g, '/');\n  return base64decode(b64Data);\n}\n\n/**\n * Encodes a string into a url safe Base 64 encoded string\n * @remark See: {@link http://tools.ietf.org/html/rfc4648#page-7}\n * @param data - String to encode\n * @returns The url safe Base 64 string\n */\nexport function base64urlencode(data: string): string {\n  if (!data) {\n    return data;\n  }\n\n  const enc = base64encode(data);\n  return enc.replace(/=/g, '').replace(/\\+/g, '-').replace(/\\//g, '_');\n}\n\nconst b64 = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';\n\n/**\n * Encode string as base64.\n * Any type can be passed, but will be stringified\n *\n * @param data - string to encode\n * @returns base64-encoded string\n */\nexport function base64encode(data: string): string {\n  // discuss at: http://phpjs.org/functions/base64_encode/\n  // original by: Tyler Akins (http://rumkin.com)\n  // improved by: Bayron Guevara\n  // improved by: Thunder.m\n  // improved by: Kevin van Zonneveld (http://kevin.vanzonneveld.net)\n  // improved by: Kevin van Zonneveld (http://kevin.vanzonneveld.net)\n  // improved by: Rafał Kukawski (http://kukawski.pl)\n  // bugfixed by: Pellentesque Malesuada\n  // example 1: base64_encode('Kevin van Zonneveld');\n  // returns 1: 'S2V2aW4gdmFuIFpvbm5ldmVsZA=='\n  // example 2: base64_encode('a');\n  // returns 2: 'YQ=='\n  // example 3: base64_encode('✓ à la mode');\n  // returns 3: '4pyTIMOgIGxhIG1vZGU='\n\n  let o1,\n    o2,\n    o3,\n    h1,\n    h2,\n    h3,\n    h4,\n    bits,\n    i = 0,\n    ac = 0;\n  const tmp_arr: Array<string> = [];\n\n  if (!data) {\n    return data;\n  }\n\n  data = unescape(encodeURIComponent(data));\n\n  do {\n    // pack three octets into four hexets\n    o1 = data.charCodeAt(i++);\n    o2 = data.charCodeAt(i++);\n    o3 = data.charCodeAt(i++);\n\n    bits = (o1 << 16) | (o2 << 8) | o3;\n\n    h1 = (bits >> 18) & 0x3f;\n    h2 = (bits >> 12) & 0x3f;\n    h3 = (bits >> 6) & 0x3f;\n    h4 = bits & 0x3f;\n\n    // use hexets to index into b64, and append result to encoded string\n    tmp_arr[ac++] = b64.charAt(h1) + b64.charAt(h2) + b64.charAt(h3) + b64.charAt(h4);\n  } while (i < data.length);\n\n  const enc = tmp_arr.join('');\n\n  const r = data.length % 3;\n\n  return (r ? enc.slice(0, r - 3) : enc) + '==='.slice(r || 3);\n}\n\n/**\n * Decode base64 to string\n *\n * @param data - base64 to string\n * @returns decoded string\n */\nexport function base64decode(encodedData: string): string {\n  //  discuss at: http://locutus.io/php/base64_decode/\n  // original by: Tyler Akins (http://rumkin.com)\n  // improved by: Thunder.m\n  // improved by: Kevin van Zonneveld (http://kvz.io)\n  // improved by: Kevin van Zonneveld (http://kvz.io)\n  //    input by: Aman Gupta\n  //    input by: Brett Zamir (http://brett-zamir.me)\n  // bugfixed by: Onno Marsman (https://twitter.com/onnomarsman)\n  // bugfixed by: Pellentesque Malesuada\n  // bugfixed by: Kevin van Zonneveld (http://kvz.io)\n  // improved by: Indigo744\n  //   example 1: base64_decode('S2V2aW4gdmFuIFpvbm5ldmVsZA==')\n  //   returns 1: 'Kevin van Zonneveld'\n  //   example 2: base64_decode('YQ==')\n  //   returns 2: 'a'\n  //   example 3: base64_decode('4pyTIMOgIGxhIG1vZGU=')\n  //   returns 3: '✓ à la mode'\n\n  // decodeUTF8string()\n  // Internal function to decode properly UTF8 string\n  // Adapted from Solution #1 at https://developer.mozilla.org/en-US/docs/Web/API/WindowBase64/Base64_encoding_and_decoding\n  const decodeUTF8string = function (str: string) {\n    // Going backwards: from bytestream, to percent-encoding, to original string.\n    return decodeURIComponent(\n      str\n        .split('')\n        .map(function (c) {\n          return '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2);\n        })\n        .join('')\n    );\n  };\n\n  let o1,\n    o2,\n    o3,\n    h1,\n    h2,\n    h3,\n    h4,\n    bits,\n    i = 0,\n    ac = 0,\n    dec = '';\n  const tmpArr: Array<string> = [];\n\n  if (!encodedData) {\n    return encodedData;\n  }\n\n  encodedData += '';\n\n  do {\n    // unpack four hexets into three octets using index points in b64\n    h1 = b64.indexOf(encodedData.charAt(i++));\n    h2 = b64.indexOf(encodedData.charAt(i++));\n    h3 = b64.indexOf(encodedData.charAt(i++));\n    h4 = b64.indexOf(encodedData.charAt(i++));\n\n    bits = (h1 << 18) | (h2 << 12) | (h3 << 6) | h4;\n\n    o1 = (bits >> 16) & 0xff;\n    o2 = (bits >> 8) & 0xff;\n    o3 = bits & 0xff;\n\n    if (h3 === 64) {\n      tmpArr[ac++] = String.fromCharCode(o1);\n    } else if (h4 === 64) {\n      tmpArr[ac++] = String.fromCharCode(o1, o2);\n    } else {\n      tmpArr[ac++] = String.fromCharCode(o1, o2, o3);\n    }\n  } while (i < encodedData.length);\n\n  dec = tmpArr.join('');\n\n  return decodeUTF8string(dec.replace(/\\0+$/, ''));\n}\n","/*\n * Copyright (c) 2021 Snowplow Analytics Ltd, 2010 Anthon Pang\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are met:\n *\n * 1. Redistributions of source code must retain the above copyright notice, this\n *    list of conditions and the following disclaimer.\n *\n * 2. Redistributions in binary form must reproduce the above copyright notice,\n *    this list of conditions and the following disclaimer in the documentation\n *    and/or other materials provided with the distribution.\n *\n * 3. Neither the name of the copyright holder nor the names of its\n *    contributors may be used to endorse or promote products derived from\n *    this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\n * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\n * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\n * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport { base64urlencode } from './base64';\n\n/**\n * Type for a Payload dictionary\n */\nexport type Payload = Record<string, unknown>;\n\n/**\n * A tuple which represents the unprocessed JSON to be added to the Payload\n */\nexport type EventJsonWithKeys = { keyIfEncoded: string; keyIfNotEncoded: string; json: Record<string, unknown> };\n\n/**\n * An array of tuples which represents the unprocessed JSON to be added to the Payload\n */\nexport type EventJson = Array<EventJsonWithKeys>;\n\n/**\n * A function which will processor the Json onto the injected PayloadBuilder\n */\nexport type JsonProcessor = (payloadBuilder: PayloadBuilder, jsonForProcessing: EventJson) => void;\n\n/**\n * Interface for mutable object encapsulating tracker payload\n */\nexport interface PayloadBuilder {\n  /**\n   * Adds an entry to the Payload\n   * @param key - Key for Payload dictionary entry\n   * @param value - Value for Payload dictionaty entry\n   */\n  add: (key: string, value: unknown) => void;\n\n  /**\n   * Merges a payload into the existing payload\n   * @param dict - The payload to merge\n   */\n  addDict: (dict: Payload) => void;\n\n  /**\n   * Caches a JSON object to be added to payload on build\n   * @param keyIfEncoded - key if base64 encoding is enabled\n   * @param keyIfNotEncoded - key if base64 encoding is disabled\n   * @param json - The json to be stringified and added to the payload\n   */\n  addJson: (keyIfEncoded: string, keyIfNotEncoded: string, json: Record<string, unknown>) => void;\n\n  /**\n   * Gets the current payload, before cached JSON is processed\n   */\n  getPayload: () => Payload;\n\n  /**\n   * Gets all JSON objects added to payload\n   */\n  getJson: () => EventJson;\n\n  /**\n   * Adds a function which will be executed when building\n   * the payload to process the JSON which has been added to this payload\n   * @param jsonProcessor - The JsonProcessor function for this builder\n   */\n  withJsonProcessor: (jsonProcessor: JsonProcessor) => void;\n\n  /**\n   * Builds and returns the Payload\n   * @param base64Encode - configures if unprocessed, cached json should be encoded\n   */\n  build: () => Payload;\n}\n\nexport function payloadBuilder(): PayloadBuilder {\n  const dict: Payload = {},\n    allJson: EventJson = [],\n    jsonForProcessing: EventJson = [];\n  let processor: JsonProcessor | undefined;\n\n  const add = (key: string, value: unknown): void => {\n    if (value != null && value !== '') {\n      // null also checks undefined\n      dict[key] = value;\n    }\n  };\n\n  const addDict = (dict: Payload): void => {\n    for (const key in dict) {\n      if (Object.prototype.hasOwnProperty.call(dict, key)) {\n        add(key, dict[key]);\n      }\n    }\n  };\n\n  const addJson = (keyIfEncoded: string, keyIfNotEncoded: string, json?: Record<string, unknown>): void => {\n    if (json && isNonEmptyJson(json)) {\n      const jsonWithKeys = { keyIfEncoded, keyIfNotEncoded, json };\n      jsonForProcessing.push(jsonWithKeys);\n      allJson.push(jsonWithKeys);\n    }\n  };\n\n  return {\n    add,\n    addDict,\n    addJson,\n    getPayload: () => dict,\n    getJson: () => allJson,\n    withJsonProcessor: (jsonProcessor) => {\n      processor = jsonProcessor;\n    },\n    build: function () {\n      processor?.(this, jsonForProcessing);\n      return dict;\n    },\n  };\n}\n\n/**\n * A helper to build a Snowplow request from a set of name-value pairs, provided using the add methods.\n * Will base64 encode JSON, if desired, on build\n *\n * @return The request builder, with add and build methods\n */\nexport function payloadJsonProcessor(encodeBase64: boolean): JsonProcessor {\n  return (payloadBuilder: PayloadBuilder, jsonForProcessing: EventJson) => {\n    for (const json of jsonForProcessing) {\n      const str = JSON.stringify(json.json);\n      if (encodeBase64) {\n        payloadBuilder.add(json.keyIfEncoded, base64urlencode(str));\n      } else {\n        payloadBuilder.add(json.keyIfNotEncoded, str);\n      }\n    }\n    jsonForProcessing.length = 0;\n  };\n}\n\n/**\n * Is property a non-empty JSON?\n * @param property - Checks if object is non-empty json\n */\nexport function isNonEmptyJson(property?: Record<string, unknown>): boolean {\n  if (!isJson(property)) {\n    return false;\n  }\n  for (const key in property) {\n    if (Object.prototype.hasOwnProperty.call(property, key)) {\n      return true;\n    }\n  }\n  return false;\n}\n\n/**\n * Is property a JSON?\n * @param property - Checks if object is json\n */\nexport function isJson(property?: Record<string, unknown>): boolean {\n  return (\n    typeof property !== 'undefined' &&\n    property !== null &&\n    (property.constructor === {}.constructor || property.constructor === [].constructor)\n  );\n}\n","/*\n * Copyright (c) 2021 Snowplow Analytics Ltd, 2010 Anthon Pang\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are met:\n *\n * 1. Redistributions of source code must retain the above copyright notice, this\n *    list of conditions and the following disclaimer.\n *\n * 2. Redistributions in binary form must reproduce the above copyright notice,\n *    this list of conditions and the following disclaimer in the documentation\n *    and/or other materials provided with the distribution.\n *\n * 3. Neither the name of the copyright holder nor the names of its\n *    contributors may be used to endorse or promote products derived from\n *    this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\n * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\n * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\n * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\nconst label = 'Snowplow: ';\n\nexport enum LOG_LEVEL {\n  none = 0,\n  error = 1,\n  warn = 2,\n  debug = 3,\n  info = 4,\n}\n\nexport interface Logger {\n  setLogLevel: (level: LOG_LEVEL) => void;\n  info: (message: string, ...extraParams: unknown[]) => void;\n  debug: (message: string, ...extraParams: unknown[]) => void;\n  warn: (message: string, error?: Error, ...extraParams: unknown[]) => void;\n  error: (message: string, error?: Error, ...extraParams: unknown[]) => void;\n}\n\nexport const LOG = logger();\n\nfunction logger(logLevel: LOG_LEVEL = LOG_LEVEL.warn): Logger {\n  function setLogLevel(level: LOG_LEVEL) {\n    if (LOG_LEVEL[level]) {\n      logLevel = level;\n    } else {\n      logLevel = LOG_LEVEL.warn;\n    }\n  }\n\n  /**\n   * Log errors, with or without error object\n   */\n  function error(message: string, error?: Error, ...extraParams: unknown[]) {\n    if (logLevel >= LOG_LEVEL.error && typeof console !== 'undefined') {\n      const logMsg = label + message + '\\n';\n      if (error) {\n        console.error(logMsg + '\\n', error, ...extraParams);\n      } else {\n        console.error(logMsg, ...extraParams);\n      }\n    }\n  }\n\n  /**\n   * Log warnings, with or without error object\n   */\n  function warn(message: string, error?: Error, ...extraParams: unknown[]) {\n    if (logLevel >= LOG_LEVEL.warn && typeof console !== 'undefined') {\n      const logMsg = label + message;\n      if (error) {\n        console.warn(logMsg + '\\n', error, ...extraParams);\n      } else {\n        console.warn(logMsg, ...extraParams);\n      }\n    }\n  }\n\n  /**\n   * Log debug messages\n   */\n  function debug(message: string, ...extraParams: unknown[]) {\n    if (logLevel >= LOG_LEVEL.debug && typeof console !== 'undefined') {\n      console.debug(label + message, ...extraParams);\n    }\n  }\n\n  /**\n   * Log info messages\n   */\n  function info(message: string, ...extraParams: unknown[]) {\n    if (logLevel >= LOG_LEVEL.info && typeof console !== 'undefined') {\n      console.info(label + message, ...extraParams);\n    }\n  }\n\n  return { setLogLevel, warn, error, debug, info };\n}\n","/*\n * Copyright (c) 2021 Snowplow Analytics Ltd, 2010 Anthon Pang\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are met:\n *\n * 1. Redistributions of source code must retain the above copyright notice, this\n *    list of conditions and the following disclaimer.\n *\n * 2. Redistributions in binary form must reproduce the above copyright notice,\n *    this list of conditions and the following disclaimer in the documentation\n *    and/or other materials provided with the distribution.\n *\n * 3. Neither the name of the copyright holder nor the names of its\n *    contributors may be used to endorse or promote products derived from\n *    this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\n * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\n * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\n * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport { PayloadBuilder, Payload, isNonEmptyJson } from './payload';\nimport { SelfDescribingJson } from './core';\nimport { CorePlugin } from './plugins';\nimport { LOG } from './logger';\n\n/**\n * Argument for {@link ContextGenerator} and {@link ContextFilter} callback\n */\nexport interface ContextEvent {\n  /** The event payload */\n  event: Payload;\n  /** The event type\n   * @example 'page_view'\n   */\n  eventType: string;\n  /** The event schema where one is available, or empty string\n   * @example 'iglu:com.snowplowanalytics.snowplow/ad_impression/jsonschema/1-0-0'\n   */\n  eventSchema: string;\n}\n\n/**\n * A context generator is a user-supplied callback that is evaluated for each event\n * to allow an additional context to be dynamically attached to the event\n * @param args - - Object which contains the event information to help decide what should be included in the returned Context\n */\nexport type ContextGenerator = (args?: ContextEvent) => SelfDescribingJson;\n\n/**\n * A context filter is a user-supplied callback that is evaluated for each event\n * to determine if the context associated with the filter should be attached to the event\n * @param args - - Object that contains: event, eventType, eventSchema\n */\nexport type ContextFilter = (args?: ContextEvent) => boolean;\n\n/**\n * A context primitive is either a self-describing JSON or a context generator\n */\nexport type ContextPrimitive = SelfDescribingJson | ContextGenerator;\n\n/**\n * A filter provider is a tuple that has two parts: a context filter and the context primitive(s)\n * If the context filter evaluates to true, the tracker will attach the context primitive(s)\n */\nexport type FilterProvider = [ContextFilter, Array<ContextPrimitive> | ContextPrimitive];\n\n/**\n * A ruleset has accept or reject properties that contain rules for matching Iglu schema URIs\n */\nexport interface RuleSet {\n  accept?: Array<string> | string;\n  reject?: Array<string> | string;\n}\n\n/**\n * A ruleset provider is aa tuple that has two parts: a ruleset and the context primitive(s)\n * If the ruleset allows the current event schema URI, the tracker will attach the context primitive(s)\n */\nexport type RuleSetProvider = [RuleSet, Array<ContextPrimitive> | ContextPrimitive];\n\n/**\n * Conditional context providers are two element arrays used to decide when to attach contexts, where:\n * - the first element is some conditional criterion\n * - the second element is any number of context primitives\n */\nexport type ConditionalContextProvider = FilterProvider | RuleSetProvider;\n\n/**\n * A Dynamic context is an array of Self Describing JSON contexts, or an array of callbacks which return Self Describing JSON contexts\n * The array can be a mix of both contexts and callbacks which generate contexts\n */\nexport type DynamicContext = Array<SelfDescribingJson | ((...params: any[]) => SelfDescribingJson | null)>;\n\nexport interface GlobalContexts {\n  /**\n   * Returns all Context Primitives\n   */\n  getGlobalPrimitives(): Array<ContextPrimitive>;\n\n  /**\n   * Returns all Conditional Contexts\n   */\n  getConditionalProviders(): Array<ConditionalContextProvider>;\n\n  /**\n   * Adds conditional or primitive global contexts\n   * @param contexts - An Array of either Conditional Contexts or Primitive Contexts\n   */\n  addGlobalContexts(contexts: Array<ConditionalContextProvider | ContextPrimitive>): void;\n\n  /**\n   * Removes all global contexts\n   */\n  clearGlobalContexts(): void;\n\n  /**\n   * Removes previously added global context, performs a deep comparison of the contexts or conditional contexts\n   * @param contexts - An Array of either Condition Contexts or Primitive Contexts\n   */\n  removeGlobalContexts(contexts: Array<ConditionalContextProvider | ContextPrimitive>): void;\n\n  /**\n   * Returns all applicable global contexts for a specified event\n   * @param event - The event to check for applicable global contexts for\n   */\n  getApplicableContexts(event: PayloadBuilder): Array<SelfDescribingJson>;\n}\n\n/**\n * Contains helper functions to aid in the addition and removal of Global Contexts\n */\nexport function globalContexts(): GlobalContexts {\n  let globalPrimitives: Array<ContextPrimitive> = [];\n  let conditionalProviders: Array<ConditionalContextProvider> = [];\n\n  /**\n   * Returns all applicable global contexts for a specified event\n   * @param event - The event to check for applicable global contexts for\n   * @returns An array of contexts\n   */\n  const assembleAllContexts = (event: PayloadBuilder): Array<SelfDescribingJson> => {\n    const eventSchema = getUsefulSchema(event);\n    const eventType = getEventType(event);\n    const contexts: Array<SelfDescribingJson> = [];\n    const generatedPrimitives = generatePrimitives(globalPrimitives, event, eventType, eventSchema);\n    contexts.push(...generatedPrimitives);\n\n    const generatedConditionals = generateConditionals(conditionalProviders, event, eventType, eventSchema);\n    contexts.push(...generatedConditionals);\n\n    return contexts;\n  };\n\n  return {\n    getGlobalPrimitives(): Array<ContextPrimitive> {\n      return globalPrimitives;\n    },\n\n    getConditionalProviders(): Array<ConditionalContextProvider> {\n      return conditionalProviders;\n    },\n\n    addGlobalContexts(contexts: Array<ConditionalContextProvider | ContextPrimitive>): void {\n      const acceptedConditionalContexts: ConditionalContextProvider[] = [];\n      const acceptedContextPrimitives: ContextPrimitive[] = [];\n      for (const context of contexts) {\n        if (isConditionalContextProvider(context)) {\n          acceptedConditionalContexts.push(context);\n        } else if (isContextPrimitive(context)) {\n          acceptedContextPrimitives.push(context);\n        }\n      }\n      globalPrimitives = globalPrimitives.concat(acceptedContextPrimitives);\n      conditionalProviders = conditionalProviders.concat(acceptedConditionalContexts);\n    },\n\n    clearGlobalContexts(): void {\n      conditionalProviders = [];\n      globalPrimitives = [];\n    },\n\n    removeGlobalContexts(contexts: Array<ConditionalContextProvider | ContextPrimitive>): void {\n      for (const context of contexts) {\n        if (isConditionalContextProvider(context)) {\n          conditionalProviders = conditionalProviders.filter(\n            (item) => JSON.stringify(item) === JSON.stringify(context)\n          );\n        } else if (isContextPrimitive(context)) {\n          globalPrimitives = globalPrimitives.filter((item) => JSON.stringify(item) === JSON.stringify(context));\n        }\n      }\n    },\n\n    getApplicableContexts(event: PayloadBuilder): Array<SelfDescribingJson> {\n      return assembleAllContexts(event);\n    },\n  };\n}\n\nexport interface PluginContexts {\n  /**\n   * Returns list of contexts from all active plugins\n   */\n  addPluginContexts: (additionalContexts?: SelfDescribingJson[] | null) => SelfDescribingJson[];\n}\n\nexport function pluginContexts(plugins: Array<CorePlugin>): PluginContexts {\n  /**\n   * Add common contexts to every event\n   *\n   * @param array - additionalContexts List of user-defined contexts\n   * @return userContexts combined with commonContexts\n   */\n  return {\n    addPluginContexts: (additionalContexts?: SelfDescribingJson[] | null): SelfDescribingJson[] => {\n      const combinedContexts: SelfDescribingJson[] = additionalContexts ?? [];\n\n      plugins.forEach((plugin) => {\n        try {\n          if (plugin.contexts) {\n            combinedContexts.push(...plugin.contexts());\n          }\n        } catch (ex) {\n          LOG.error('Error adding plugin contexts', ex);\n        }\n      });\n\n      return combinedContexts;\n    },\n  };\n}\n\n/**\n * Find dynamic context generating functions and return their results to be merged into the static contexts\n * Combine an array of unchanging contexts with the result of a context-creating function\n *\n * @param dynamicOrStaticContexts - Array of custom context Objects or custom context generating functions\n * @param Parameters - to pass to dynamic context callbacks\n * @returns An array of Self Describing JSON context\n */\nexport function resolveDynamicContext(\n  dynamicOrStaticContexts?: DynamicContext | null,\n  ...extraParams: any[]\n): Array<SelfDescribingJson> {\n  return (\n    (dynamicOrStaticContexts\n      ?.map(function (context) {\n        if (typeof context === 'function') {\n          try {\n            return context(...extraParams);\n          } catch (e) {\n            //TODO: provide warning\n            return undefined;\n          }\n        } else {\n          return context;\n        }\n      })\n      .filter(Boolean) as Array<SelfDescribingJson>) ?? []\n  );\n}\n\n/**\n * Slices a schema into its composite parts. Useful for ruleset filtering.\n * @param input - A schema string\n * @returns The vendor, schema name, major, minor and patch information of a schema string\n */\nexport function getSchemaParts(input: string): Array<string> | undefined {\n  const re = new RegExp(\n    '^iglu:([a-zA-Z0-9-_.]+)/([a-zA-Z0-9-_]+)/jsonschema/([1-9][0-9]*)-(0|[1-9][0-9]*)-(0|[1-9][0-9]*)$'\n  );\n  const matches = re.exec(input);\n  if (matches !== null) return matches.slice(1, 6);\n  return undefined;\n}\n\n/**\n * Validates the vendor section of a schema string contains allowed wildcard values\n * @param parts - Array of parts from a schema string\n * @returns Whether the vendor validation parts are a valid combination\n */\nexport function validateVendorParts(parts: Array<string>): boolean {\n  if (parts[0] === '*' || parts[1] === '*') {\n    return false; // no wildcard in first or second part\n  }\n  if (parts.slice(2).length > 0) {\n    let asterisk = false;\n    for (const part of parts.slice(2)) {\n      if (part === '*')\n        // mark when we've found a wildcard\n        asterisk = true;\n      else if (asterisk)\n        // invalid if alpha parts come after wildcard\n        return false;\n    }\n    return true;\n  } else if (parts.length == 2) return true;\n\n  return false;\n}\n\n/**\n * Validates the vendor part of a schema string is valid for a rule set\n * @param input - Vendor part of a schema string\n * @returns Whether the vendor validation string is valid\n */\nexport function validateVendor(input: string): boolean {\n  const parts = input.split('.');\n  if (parts && parts.length > 1) return validateVendorParts(parts);\n  return false;\n}\n\n/**\n * Checks for validity of input and returns all the sections of a schema string that are used to match rules in a ruleset\n * @param input - A Schema string\n * @returns The sections of a schema string that are used to match rules in a ruleset\n */\nexport function getRuleParts(input: string): Array<string> | undefined {\n  const re = new RegExp(\n    '^iglu:((?:(?:[a-zA-Z0-9-_]+|\\\\*).)+(?:[a-zA-Z0-9-_]+|\\\\*))/([a-zA-Z0-9-_.]+|\\\\*)/jsonschema/([1-9][0-9]*|\\\\*)-(0|[1-9][0-9]*|\\\\*)-(0|[1-9][0-9]*|\\\\*)$'\n  );\n  const matches = re.exec(input);\n  if (matches !== null && validateVendor(matches[1])) return matches.slice(1, 6);\n  return undefined;\n}\n\n/**\n * Ensures the rules specified in a schema string of a ruleset are valid\n * @param input - A Schema string\n * @returns if there rule is valid\n */\nexport function isValidRule(input: string): boolean {\n  const ruleParts = getRuleParts(input);\n  if (ruleParts) {\n    const vendor = ruleParts[0];\n    return ruleParts.length === 5 && validateVendor(vendor);\n  }\n  return false;\n}\n\n/**\n * Check if a variable is an Array containing only strings\n * @param input - The variable to validate\n * @returns True if the input is an array containing only strings\n */\nexport function isStringArray(input: unknown): input is Array<string> {\n  return (\n    Array.isArray(input) &&\n    input.every((x) => {\n      return typeof x === 'string';\n    })\n  );\n}\n\n/**\n * Validates whether a rule set is an array of valid ruleset strings\n * @param input - The Array of rule set arguments\n * @returns True is the input is an array of valid rules\n */\nexport function isValidRuleSetArg(input: unknown): boolean {\n  if (isStringArray(input))\n    return input.every((x: string) => {\n      return isValidRule(x);\n    });\n  else if (typeof input === 'string') return isValidRule(input);\n  return false;\n}\n\n/**\n * Check if a variable is a valid, non-empty Self Describing JSON\n * @param input - The variable to validate\n * @returns True if a valid Self Describing JSON\n */\nexport function isSelfDescribingJson(input: unknown): input is SelfDescribingJson {\n  const sdj = input as SelfDescribingJson;\n  if (isNonEmptyJson(sdj))\n    if ('schema' in sdj && 'data' in sdj) return typeof sdj.schema === 'string' && typeof sdj.data === 'object';\n  return false;\n}\n\n/**\n * Validates if the input object contains the expected properties of a ruleset\n * @param input - The object containing a rule set\n * @returns True if a valid rule set\n */\nexport function isRuleSet(input: unknown): input is Record<string, unknown> {\n  const ruleSet = input as Record<string, unknown>;\n  let ruleCount = 0;\n  if (input != null && typeof input === 'object' && !Array.isArray(input)) {\n    if (Object.prototype.hasOwnProperty.call(ruleSet, 'accept')) {\n      if (isValidRuleSetArg(ruleSet['accept'])) {\n        ruleCount += 1;\n      } else {\n        return false;\n      }\n    }\n    if (Object.prototype.hasOwnProperty.call(ruleSet, 'reject')) {\n      if (isValidRuleSetArg(ruleSet['reject'])) {\n        ruleCount += 1;\n      } else {\n        return false;\n      }\n    }\n    // if either 'reject' or 'accept' or both exists,\n    // we have a valid ruleset\n    return ruleCount > 0 && ruleCount <= 2;\n  }\n  return false;\n}\n\n/**\n * Validates if the function can be a valid context generator function\n * @param input - The function to be validated\n */\nexport function isContextCallbackFunction(input: unknown): boolean {\n  return typeof input === 'function' && input.length <= 1;\n}\n\n/**\n * Validates if the function can be a valid context primitive function or self describing json\n * @param input - The function or orbject to be validated\n * @returns True if either a Context Generator or Self Describing JSON\n */\nexport function isContextPrimitive(input: unknown): input is ContextPrimitive {\n  return isContextCallbackFunction(input) || isSelfDescribingJson(input);\n}\n\n/**\n * Validates if an array is a valid shape to be a Filter Provider\n * @param input - The Array of Context filter callbacks\n */\nexport function isFilterProvider(input: unknown): boolean {\n  if (Array.isArray(input)) {\n    if (input.length === 2) {\n      if (Array.isArray(input[1])) {\n        return isContextCallbackFunction(input[0]) && input[1].every(isContextPrimitive);\n      }\n      return isContextCallbackFunction(input[0]) && isContextPrimitive(input[1]);\n    }\n  }\n  return false;\n}\n\n/**\n * Validates if an array is a valid shape to be an array of rule sets\n * @param input - The Array of Rule Sets\n */\nexport function isRuleSetProvider(input: unknown): boolean {\n  if (Array.isArray(input) && input.length === 2) {\n    if (!isRuleSet(input[0])) return false;\n    if (Array.isArray(input[1])) return input[1].every(isContextPrimitive);\n    return isContextPrimitive(input[1]);\n  }\n  return false;\n}\n\n/**\n * Checks if an input array is either a filter provider or a rule set provider\n * @param input - An array of filter providers or rule set providers\n * @returns Whether the array is a valid {@link ConditionalContextProvider}\n */\nexport function isConditionalContextProvider(input: unknown): input is ConditionalContextProvider {\n  return isFilterProvider(input) || isRuleSetProvider(input);\n}\n\n/**\n * Checks if a given schema matches any rules within the provided rule set\n * @param ruleSet - The rule set containing rules to match schema against\n * @param schema - The schema to be matched against the rule set\n */\nexport function matchSchemaAgainstRuleSet(ruleSet: RuleSet, schema: string): boolean {\n  let rejectCount = 0;\n  let acceptCount = 0;\n  const acceptRules = ruleSet['accept'];\n  if (Array.isArray(acceptRules)) {\n    if ((ruleSet.accept as Array<string>).some((rule) => matchSchemaAgainstRule(rule, schema))) {\n      acceptCount++;\n    }\n  } else if (typeof acceptRules === 'string') {\n    if (matchSchemaAgainstRule(acceptRules, schema)) {\n      acceptCount++;\n    }\n  }\n\n  const rejectRules = ruleSet['reject'];\n  if (Array.isArray(rejectRules)) {\n    if ((ruleSet.reject as Array<string>).some((rule) => matchSchemaAgainstRule(rule, schema))) {\n      rejectCount++;\n    }\n  } else if (typeof rejectRules === 'string') {\n    if (matchSchemaAgainstRule(rejectRules, schema)) {\n      rejectCount++;\n    }\n  }\n\n  if (acceptCount > 0 && rejectCount === 0) {\n    return true;\n  } else if (acceptCount === 0 && rejectCount > 0) {\n    return false;\n  }\n\n  return false;\n}\n\n/**\n * Checks if a given schema matches a specific rule from a rule set\n * @param rule - The rule to match schema against\n * @param schema - The schema to be matched against the rule\n */\nexport function matchSchemaAgainstRule(rule: string, schema: string): boolean {\n  if (!isValidRule(rule)) return false;\n  const ruleParts = getRuleParts(rule);\n  const schemaParts = getSchemaParts(schema);\n  if (ruleParts && schemaParts) {\n    if (!matchVendor(ruleParts[0], schemaParts[0])) return false;\n    for (let i = 1; i < 5; i++) {\n      if (!matchPart(ruleParts[i], schemaParts[i])) return false;\n    }\n    return true; // if it hasn't failed, it passes\n  }\n  return false;\n}\n\nfunction matchVendor(rule: string, vendor: string): boolean {\n  // rule and vendor must have same number of elements\n  const vendorParts = vendor.split('.');\n  const ruleParts = rule.split('.');\n  if (vendorParts && ruleParts) {\n    if (vendorParts.length !== ruleParts.length) return false;\n    for (let i = 0; i < ruleParts.length; i++) {\n      if (!matchPart(vendorParts[i], ruleParts[i])) return false;\n    }\n    return true;\n  }\n  return false;\n}\n\nfunction matchPart(rule: string, schema: string): boolean {\n  // parts should be the string nested between slashes in the URI: /example/\n  return (rule && schema && rule === '*') || rule === schema;\n}\n\n// Returns the \"useful\" schema, i.e. what would someone want to use to identify events.\n// For some events this is the 'e' property but for unstructured events, this is the\n// 'schema' from the 'ue_px' field.\nfunction getUsefulSchema(sb: PayloadBuilder): string {\n  let eventJson = sb.getJson();\n  for (const json of eventJson) {\n    if (json.keyIfEncoded === 'ue_px' && typeof json.json['data'] === 'object') {\n      const schema = (json.json['data'] as Record<string, unknown>)['schema'];\n      if (typeof schema == 'string') {\n        return schema;\n      }\n    }\n  }\n  return '';\n}\n\nfunction getEventType(payloadBuilder: PayloadBuilder): string {\n  const eventType = payloadBuilder.getPayload()['e'];\n  return typeof eventType === 'string' ? eventType : '';\n}\n\nfunction buildGenerator(\n  generator: ContextGenerator,\n  event: PayloadBuilder,\n  eventType: string,\n  eventSchema: string\n): SelfDescribingJson | Array<SelfDescribingJson> | undefined {\n  let contextGeneratorResult: SelfDescribingJson | Array<SelfDescribingJson> | undefined = undefined;\n  try {\n    // try to evaluate context generator\n    const args = {\n      event: event.getPayload(),\n      eventType: eventType,\n      eventSchema: eventSchema,\n    };\n    contextGeneratorResult = generator(args);\n    // determine if the produced result is a valid SDJ\n    if (Array.isArray(contextGeneratorResult) && contextGeneratorResult.every(isSelfDescribingJson)) {\n      return contextGeneratorResult;\n    } else if (isSelfDescribingJson(contextGeneratorResult)) {\n      return contextGeneratorResult;\n    } else {\n      return undefined;\n    }\n  } catch (error) {\n    contextGeneratorResult = undefined;\n  }\n  return contextGeneratorResult;\n}\n\nfunction normalizeToArray<T>(input: Array<T> | T): Array<T> {\n  if (Array.isArray(input)) {\n    return input;\n  }\n  return Array.of(input);\n}\n\nfunction generatePrimitives(\n  contextPrimitives: Array<ContextPrimitive> | ContextPrimitive,\n  event: PayloadBuilder,\n  eventType: string,\n  eventSchema: string\n): Array<SelfDescribingJson> {\n  const normalizedInputs: Array<ContextPrimitive> = normalizeToArray(contextPrimitives);\n  const partialEvaluate = (primitive: ContextPrimitive) => {\n    const result = evaluatePrimitive(primitive, event, eventType, eventSchema);\n    if (result && result.length !== 0) {\n      return result;\n    }\n    return undefined;\n  };\n  const generatedContexts = normalizedInputs.map(partialEvaluate);\n  return ([] as Array<SelfDescribingJson>).concat(\n    ...(generatedContexts.filter((c) => c != null && c.filter(Boolean)) as Array<Array<SelfDescribingJson>>)\n  );\n}\n\nfunction evaluatePrimitive(\n  contextPrimitive: ContextPrimitive,\n  event: PayloadBuilder,\n  eventType: string,\n  eventSchema: string\n): Array<SelfDescribingJson> | undefined {\n  if (isSelfDescribingJson(contextPrimitive)) {\n    return [contextPrimitive as SelfDescribingJson];\n  } else if (isContextCallbackFunction(contextPrimitive)) {\n    const generatorOutput = buildGenerator(contextPrimitive as ContextGenerator, event, eventType, eventSchema);\n    if (isSelfDescribingJson(generatorOutput)) {\n      return [generatorOutput as SelfDescribingJson];\n    } else if (Array.isArray(generatorOutput)) {\n      return generatorOutput;\n    }\n  }\n  return undefined;\n}\n\nfunction evaluateProvider(\n  provider: ConditionalContextProvider,\n  event: PayloadBuilder,\n  eventType: string,\n  eventSchema: string\n): Array<SelfDescribingJson> {\n  if (isFilterProvider(provider)) {\n    const filter: ContextFilter = (provider as FilterProvider)[0];\n    let filterResult = false;\n    try {\n      const args = {\n        event: event.getPayload(),\n        eventType: eventType,\n        eventSchema: eventSchema,\n      };\n      filterResult = filter(args);\n    } catch (error) {\n      filterResult = false;\n    }\n    if (filterResult === true) {\n      return generatePrimitives((provider as FilterProvider)[1], event, eventType, eventSchema);\n    }\n  } else if (isRuleSetProvider(provider)) {\n    if (matchSchemaAgainstRuleSet((provider as RuleSetProvider)[0], eventSchema)) {\n      return generatePrimitives((provider as RuleSetProvider)[1], event, eventType, eventSchema);\n    }\n  }\n  return [];\n}\n\nfunction generateConditionals(\n  providers: Array<ConditionalContextProvider> | ConditionalContextProvider,\n  event: PayloadBuilder,\n  eventType: string,\n  eventSchema: string\n): Array<SelfDescribingJson> {\n  const normalizedInput: Array<ConditionalContextProvider> = normalizeToArray(providers);\n  const partialEvaluate = (provider: ConditionalContextProvider) => {\n    const result = evaluateProvider(provider, event, eventType, eventSchema);\n    if (result && result.length !== 0) {\n      return result;\n    }\n    return undefined;\n  };\n  const generatedContexts = normalizedInput.map(partialEvaluate);\n  return ([] as Array<SelfDescribingJson>).concat(\n    ...(generatedContexts.filter((c) => c != null && c.filter(Boolean)) as Array<Array<SelfDescribingJson>>)\n  );\n}\n","/*\n * Copyright (c) 2021 Snowplow Analytics Ltd, 2010 Anthon Pang\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are met:\n *\n * 1. Redistributions of source code must retain the above copyright notice, this\n *    list of conditions and the following disclaimer.\n *\n * 2. Redistributions in binary form must reproduce the above copyright notice,\n *    this list of conditions and the following disclaimer in the documentation\n *    and/or other materials provided with the distribution.\n *\n * 3. Neither the name of the copyright holder nor the names of its\n *    contributors may be used to endorse or promote products derived from\n *    this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\n * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\n * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\n * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport { v4 as uuid } from 'uuid';\nimport { payloadBuilder, PayloadBuilder, Payload, isJson, payloadJsonProcessor } from './payload';\nimport {\n  globalContexts,\n  ConditionalContextProvider,\n  ContextPrimitive,\n  GlobalContexts,\n  PluginContexts,\n  pluginContexts,\n} from './contexts';\nimport { CorePlugin } from './plugins';\nimport { LOG } from './logger';\n\n/**\n * export interface for any Self-Describing JSON such as context or Self Describing events\n * @typeParam T - The type of the data object within a SelfDescribingJson\n */\nexport type SelfDescribingJson<T extends Record<keyof T, unknown> = Record<string, unknown>> = {\n  /**\n   * The schema string\n   * @example 'iglu:com.snowplowanalytics.snowplow/web_page/jsonschema/1-0-0'\n   */\n  schema: string;\n  /**\n   * The data object which should conform to the supplied schema\n   */\n  data: T;\n};\n\n/**\n * export interface for any Self-Describing JSON which has the data attribute as an array\n * @typeParam T - The type of the data object within the SelfDescribingJson data array\n */\nexport type SelfDescribingJsonArray<T extends Record<keyof T, unknown> = Record<string, unknown>> = {\n  /**\n   * The schema string\n   * @example 'iglu:com.snowplowanalytics.snowplow/contexts/jsonschema/1-0-1'\n   */\n  schema: string;\n  /**\n   * The data array which should conform to the supplied schema\n   */\n  data: Array<T>;\n};\n\n/**\n * Algebraic datatype representing possible timestamp type choice\n */\nexport type Timestamp = TrueTimestamp | DeviceTimestamp | number;\n\n/**\n * A representation of a True Timestamp (ttm)\n */\nexport interface TrueTimestamp {\n  readonly type: 'ttm';\n  readonly value: number;\n}\n\n/**\n * A representation of a Device Timestamp (dtm)\n */\nexport interface DeviceTimestamp {\n  readonly type: 'dtm';\n  readonly value: number;\n}\n\n/**\n * Pair of timestamp type ready to be included to payload\n */\ntype TimestampPayload = TrueTimestamp | DeviceTimestamp;\n\n/**\n * Transform optional/old-behavior number timestamp into`Timestamp` ADT\n *\n * @param timestamp - optional number or timestamp object\n * @returns correct timestamp object\n */\nfunction getTimestamp(timestamp?: Timestamp | null): TimestampPayload {\n  if (timestamp == null) {\n    return { type: 'dtm', value: new Date().getTime() };\n  } else if (typeof timestamp === 'number') {\n    return { type: 'dtm', value: timestamp };\n  } else if (timestamp.type === 'ttm') {\n    // We can return timestamp here, but this is safer fallback\n    return { type: 'ttm', value: timestamp.value };\n  } else {\n    return { type: 'dtm', value: timestamp.value || new Date().getTime() };\n  }\n}\n\n/** Additional data points to set when tracking an event */\nexport interface CommonEventProperties {\n  /** Add context to an event by setting an Array of Self Describing JSON */\n  context?: Array<SelfDescribingJson> | null;\n  /** Set the true timestamp or overwrite the device sent timestamp on an event */\n  timestamp?: Timestamp | null;\n}\n\n/**\n * export interface containing all Core functions\n */\nexport interface TrackerCore {\n  /**\n   * Call with a payload from a buildX function\n   * Adds context and payloadPairs name-value pairs to the payload\n   * Applies the callback to the built payload\n   *\n   * @param pb - Payload\n   * @param context - Custom contexts relating to the event\n   * @param timestamp - Timestamp of the event\n   * @return Payload after the callback is applied\n   */\n  track: (\n    /** A PayloadBuilder created by one of the `buildX` functions */\n    pb: PayloadBuilder,\n    /** The additional contextual information related to the event */\n    context?: Array<SelfDescribingJson> | null,\n    /** Timestamp override */\n    timestamp?: Timestamp | null\n  ) => Payload;\n\n  /**\n   * Set a persistent key-value pair to be added to every payload\n   *\n   * @param key - Field name\n   * @param value - Field value\n   */\n  addPayloadPair: (key: string, value: string | number) => void;\n\n  /**\n   * Get current base64 encoding state\n   */\n  getBase64Encoding(): boolean;\n\n  /**\n   * Turn base 64 encoding on or off\n   *\n   * @param encode - Whether to encode payload\n   */\n  setBase64Encoding(encode: boolean): void;\n\n  /**\n   * Merges a dictionary into payloadPairs\n   *\n   * @param dict - Adds a new payload dictionary to the existing one\n   */\n  addPayloadDict(dict: Payload): void;\n\n  /**\n   * Replace payloadPairs with a new dictionary\n   *\n   * @param dict - Resets all current payload pairs with a new dictionary of pairs\n   */\n  resetPayloadPairs(dict: Payload): void;\n\n  /**\n   * Set the tracker version\n   *\n   * @param version - The version of the current tracker\n   */\n  setTrackerVersion(version: string): void;\n\n  /**\n   * Set the tracker namespace\n   *\n   * @param name - The trackers namespace\n   */\n  setTrackerNamespace(name: string): void;\n\n  /**\n   * Set the application ID\n   *\n   * @param appId - An application ID which identifies the current application\n   */\n  setAppId(appId: string): void;\n\n  /**\n   * Set the platform\n   *\n   * @param value - A valid Snowplow platform value\n   */\n  setPlatform(value: string): void;\n\n  /**\n   * Set the user ID\n   *\n   * @param userId - The custom user id\n   */\n  setUserId(userId: string): void;\n\n  /**\n   * Set the screen resolution\n   *\n   * @param width - screen resolution width\n   * @param height - screen resolution height\n   */\n  setScreenResolution(width: string, height: string): void;\n\n  /**\n   * Set the viewport dimensions\n   *\n   * @param width - viewport width\n   * @param height - viewport height\n   */\n  setViewport(width: string, height: string): void;\n\n  /**\n   * Set the color depth\n   *\n   * @param depth - A color depth value as string\n   */\n  setColorDepth(depth: string): void;\n\n  /**\n   * Set the timezone\n   *\n   * @param timezone - A timezone string\n   */\n  setTimezone(timezone: string): void;\n\n  /**\n   * Set the language\n   *\n   * @param lang - A language string e.g. 'en-UK'\n   */\n  setLang(lang: string): void;\n\n  /**\n   * Set the IP address\n   *\n   * @param ip - An IP Address string\n   */\n  setIpAddress(ip: string): void;\n\n  /**\n   * Set the Useragent\n   *\n   * @param useragent - A useragent string\n   */\n  setUseragent(useragent: string): void;\n\n  /**\n   * Adds contexts globally, contexts added here will be attached to all applicable events\n   * @param contexts - An array containing either contexts or a conditional contexts\n   */\n  addGlobalContexts(contexts: Array<ConditionalContextProvider | ContextPrimitive>): void;\n\n  /**\n   * Removes all global contexts\n   */\n  clearGlobalContexts(): void;\n\n  /**\n   * Removes previously added global context, performs a deep comparison of the contexts or conditional contexts\n   * @param contexts - An array containing either contexts or a conditional contexts\n   */\n  removeGlobalContexts(contexts: Array<ConditionalContextProvider | ContextPrimitive>): void;\n\n  /**\n   * Add a plugin into the plugin collection after Core has already been initialised\n   * @param configuration - The plugin to add\n   */\n  addPlugin(configuration: CorePluginConfiguration): void;\n}\n\n/**\n * The configuration object for the tracker core library\n */\nexport interface CoreConfiguration {\n  /* Should payloads be base64 encoded when built */\n  base64?: boolean;\n  /* A list of all the plugins to include at load */\n  corePlugins?: Array<CorePlugin>;\n  /* The callback which will fire each time `track()` is called */\n  callback?: (PayloadData: PayloadBuilder) => void;\n}\n\n/**\n * The configuration of the plugin to add\n */\nexport interface CorePluginConfiguration {\n  /* The plugin to add */\n  plugin: CorePlugin;\n}\n\n/**\n * Create a tracker core object\n *\n * @param base64 - Whether to base 64 encode contexts and self describing event JSONs\n * @param corePlugins - The core plugins to be processed with each event\n * @param callback - Function applied to every payload dictionary object\n * @return Tracker core\n */\nexport function trackerCore(configuration: CoreConfiguration = {}): TrackerCore {\n  function newCore(base64: boolean, corePlugins: Array<CorePlugin>, callback?: (PayloadData: PayloadBuilder) => void) {\n    const pluginContextsHelper: PluginContexts = pluginContexts(corePlugins),\n      globalContextsHelper: GlobalContexts = globalContexts();\n\n    let encodeBase64 = base64,\n      payloadPairs: Payload = {}; // Dictionary of key-value pairs which get added to every payload, e.g. tracker version\n\n    /**\n     * Wraps an array of custom contexts in a self-describing JSON\n     *\n     * @param contexts - Array of custom context self-describing JSONs\n     * @return Outer JSON\n     */\n    function completeContexts(\n      contexts?: Array<SelfDescribingJson>\n    ): SelfDescribingJsonArray<SelfDescribingJson> | undefined {\n      if (contexts && contexts.length) {\n        return {\n          schema: 'iglu:com.snowplowanalytics.snowplow/contexts/jsonschema/1-0-0',\n          data: contexts,\n        };\n      }\n      return undefined;\n    }\n\n    /**\n     * Adds all global contexts to a contexts array\n     *\n     * @param pb - PayloadData\n     * @param contexts - Custom contexts relating to the event\n     */\n    function attachGlobalContexts(\n      pb: PayloadBuilder,\n      contexts?: Array<SelfDescribingJson> | null\n    ): Array<SelfDescribingJson> {\n      const applicableContexts: Array<SelfDescribingJson> = globalContextsHelper.getApplicableContexts(pb);\n      const returnedContexts: Array<SelfDescribingJson> = [];\n      if (contexts && contexts.length) {\n        returnedContexts.push(...contexts);\n      }\n      if (applicableContexts && applicableContexts.length) {\n        returnedContexts.push(...applicableContexts);\n      }\n      return returnedContexts;\n    }\n\n    /**\n     * Gets called by every trackXXX method\n     * Adds context and payloadPairs name-value pairs to the payload\n     * Applies the callback to the built payload\n     *\n     * @param pb - Payload\n     * @param context - Custom contexts relating to the event\n     * @param timestamp - Timestamp of the event\n     * @return Payload after the callback is applied\n     */\n    function track(\n      pb: PayloadBuilder,\n      context?: Array<SelfDescribingJson> | null,\n      timestamp?: Timestamp | null\n    ): Payload {\n      pb.withJsonProcessor(payloadJsonProcessor(encodeBase64));\n      pb.add('eid', uuid());\n      pb.addDict(payloadPairs);\n      const tstamp = getTimestamp(timestamp);\n      pb.add(tstamp.type, tstamp.value.toString());\n      const allContexts = attachGlobalContexts(pb, pluginContextsHelper.addPluginContexts(context));\n      const wrappedContexts = completeContexts(allContexts);\n      if (wrappedContexts !== undefined) {\n        pb.addJson('cx', 'co', wrappedContexts);\n      }\n\n      corePlugins.forEach((plugin) => {\n        try {\n          if (plugin.beforeTrack) {\n            plugin.beforeTrack(pb);\n          }\n        } catch (ex) {\n          LOG.error('Plugin beforeTrack', ex);\n        }\n      });\n\n      if (typeof callback === 'function') {\n        callback(pb);\n      }\n\n      const finalPayload = pb.build();\n\n      corePlugins.forEach((plugin) => {\n        try {\n          if (plugin.afterTrack) {\n            plugin.afterTrack(finalPayload);\n          }\n        } catch (ex) {\n          LOG.error('Plugin afterTrack', ex);\n        }\n      });\n\n      return finalPayload;\n    }\n\n    /**\n     * Set a persistent key-value pair to be added to every payload\n     *\n     * @param key - Field name\n     * @param value - Field value\n     */\n    function addPayloadPair(key: string, value: string | number): void {\n      payloadPairs[key] = value;\n    }\n\n    const core = {\n      track,\n\n      addPayloadPair,\n\n      getBase64Encoding() {\n        return encodeBase64;\n      },\n\n      setBase64Encoding(encode: boolean) {\n        encodeBase64 = encode;\n      },\n\n      addPayloadDict(dict: Payload) {\n        for (const key in dict) {\n          if (Object.prototype.hasOwnProperty.call(dict, key)) {\n            payloadPairs[key] = dict[key];\n          }\n        }\n      },\n\n      resetPayloadPairs(dict: Payload) {\n        payloadPairs = isJson(dict) ? dict : {};\n      },\n\n      setTrackerVersion(version: string) {\n        addPayloadPair('tv', version);\n      },\n\n      setTrackerNamespace(name: string) {\n        addPayloadPair('tna', name);\n      },\n\n      setAppId(appId: string) {\n        addPayloadPair('aid', appId);\n      },\n\n      setPlatform(value: string) {\n        addPayloadPair('p', value);\n      },\n\n      setUserId(userId: string) {\n        addPayloadPair('uid', userId);\n      },\n\n      setScreenResolution(width: string, height: string) {\n        addPayloadPair('res', width + 'x' + height);\n      },\n\n      setViewport(width: string, height: string) {\n        addPayloadPair('vp', width + 'x' + height);\n      },\n\n      setColorDepth(depth: string) {\n        addPayloadPair('cd', depth);\n      },\n\n      setTimezone(timezone: string) {\n        addPayloadPair('tz', timezone);\n      },\n\n      setLang(lang: string) {\n        addPayloadPair('lang', lang);\n      },\n\n      setIpAddress(ip: string) {\n        addPayloadPair('ip', ip);\n      },\n\n      setUseragent(useragent: string) {\n        addPayloadPair('ua', useragent);\n      },\n\n      addGlobalContexts(contexts: Array<ConditionalContextProvider | ContextPrimitive>) {\n        globalContextsHelper.addGlobalContexts(contexts);\n      },\n\n      clearGlobalContexts(): void {\n        globalContextsHelper.clearGlobalContexts();\n      },\n\n      removeGlobalContexts(contexts: Array<ConditionalContextProvider | ContextPrimitive>) {\n        globalContextsHelper.removeGlobalContexts(contexts);\n      },\n    };\n\n    return core;\n  }\n\n  const { base64, corePlugins, callback } = configuration,\n    plugins = corePlugins ?? [],\n    partialCore = newCore(base64 ?? true, plugins, callback),\n    core = {\n      ...partialCore,\n      addPlugin: (configuration: CorePluginConfiguration) => {\n        const { plugin } = configuration;\n        plugins.push(plugin);\n        plugin.logger?.(LOG);\n        plugin.activateCorePlugin?.(core);\n      },\n    };\n\n  plugins?.forEach((plugin) => {\n    plugin.logger?.(LOG);\n    plugin.activateCorePlugin?.(core);\n  });\n\n  return core;\n}\n\n/**\n * A Self Describing Event\n * A custom event type, allowing for an event to be tracked using your own custom schema\n * and a data object which conforms to the supplied schema\n */\nexport interface SelfDescribingEvent {\n  /** The Self Describing JSON which describes the event */\n  event: SelfDescribingJson;\n}\n\n/**\n * Build a self-describing event\n * A custom event type, allowing for an event to be tracked using your own custom schema\n * and a data object which conforms to the supplied schema\n *\n * @param event - Contains the properties and schema location for the event\n * @return PayloadBuilder to be sent to {@link Core.track()}\n */\nexport function buildSelfDescribingEvent(event: SelfDescribingEvent): PayloadBuilder {\n  const {\n      event: { schema, data },\n    } = event,\n    pb = payloadBuilder();\n  const ueJson = {\n    schema: 'iglu:com.snowplowanalytics.snowplow/unstruct_event/jsonschema/1-0-0',\n    data: { schema, data },\n  };\n\n  pb.add('e', 'ue');\n  pb.addJson('ue_px', 'ue_pr', ueJson);\n\n  return pb;\n}\n\n/**\n * A Page View Event\n * Represents a Page View, which is typically fired as soon as possible when a web page\n * is loaded within the users browser. Often also fired on \"virtual page views\" within\n * Single Page Applications (SPA).\n */\nexport interface PageViewEvent {\n  /** The current URL visible in the users browser */\n  pageUrl?: string | null;\n  /** The current page title in the users browser */\n  pageTitle?: string | null;\n  /** The URL of the referring page */\n  referrer?: string | null;\n}\n\n/**\n * Build a Page View Event\n * Represents a Page View, which is typically fired as soon as possible when a web page\n * is loaded within the users browser. Often also fired on \"virtual page views\" within\n * Single Page Applications (SPA).\n *\n * @param event - Contains the properties for the Page View event\n * @return PayloadBuilder to be sent to {@link Core.track()}\n */\nexport function buildPageView(event: PageViewEvent): PayloadBuilder {\n  const { pageUrl, pageTitle, referrer } = event,\n    pb = payloadBuilder();\n  pb.add('e', 'pv'); // 'pv' for Page View\n  pb.add('url', pageUrl);\n  pb.add('page', pageTitle);\n  pb.add('refr', referrer);\n\n  return pb;\n}\n\n/**\n * A Page Ping Event\n * Fires when activity tracking is enabled in the browser.\n * Tracks same information as the last tracked Page View and includes scroll\n * information from the current page view\n */\nexport interface PagePingEvent extends PageViewEvent {\n  /** The minimum X scroll position for the current page view */\n  minXOffset?: number;\n  /** The maximum X scroll position for the current page view */\n  maxXOffset?: number;\n  /** The minimum Y scroll position for the current page view */\n  minYOffset?: number;\n  /** The maximum Y scroll position for the current page view */\n  maxYOffset?: number;\n}\n\n/**\n * Build a Page Ping Event\n * Fires when activity tracking is enabled in the browser.\n * Tracks same information as the last tracked Page View and includes scroll\n * information from the current page view\n *\n * @param event - Contains the properties for the Page Ping event\n * @return PayloadBuilder to be sent to {@link Core.track()}\n */\nexport function buildPagePing(event: PagePingEvent): PayloadBuilder {\n  const { pageUrl, pageTitle, referrer, minXOffset, maxXOffset, minYOffset, maxYOffset } = event,\n    pb = payloadBuilder();\n  pb.add('e', 'pp'); // 'pp' for Page Ping\n  pb.add('url', pageUrl);\n  pb.add('page', pageTitle);\n  pb.add('refr', referrer);\n  if (minXOffset && !isNaN(Number(minXOffset))) pb.add('pp_mix', minXOffset.toString());\n  if (maxXOffset && !isNaN(Number(maxXOffset))) pb.add('pp_max', maxXOffset.toString());\n  if (minYOffset && !isNaN(Number(minYOffset))) pb.add('pp_miy', minYOffset.toString());\n  if (maxYOffset && !isNaN(Number(maxYOffset))) pb.add('pp_may', maxYOffset.toString());\n\n  return pb;\n}\n\n/**\n * A Structured Event\n * A classic style of event tracking, allows for easier movement between analytics\n * systems. A loosely typed event, creating a Self Describing event is preferred, but\n * useful for interoperability.\n */\nexport interface StructuredEvent {\n  category: string;\n  action: string;\n  label?: string;\n  property?: string;\n  value?: number;\n}\n\n/**\n * Build a Structured Event\n * A classic style of event tracking, allows for easier movement between analytics\n * systems. A loosely typed event, creating a Self Describing event is preferred, but\n * useful for interoperability.\n *\n * @param event - Contains the properties for the Structured event\n * @return PayloadBuilder to be sent to {@link Core.track()}\n */\nexport function buildStructEvent(event: StructuredEvent): PayloadBuilder {\n  const { category, action, label, property, value } = event,\n    pb = payloadBuilder();\n  pb.add('e', 'se'); // 'se' for Structured Event\n  pb.add('se_ca', category);\n  pb.add('se_ac', action);\n  pb.add('se_la', label);\n  pb.add('se_pr', property);\n  pb.add('se_va', value == null ? undefined : value.toString());\n\n  return pb;\n}\n\n/**\n * An Ecommerce Transaction Event\n * Allows for tracking common ecommerce events, this event is usually used when\n * a customer completes a transaction.\n */\nexport interface EcommerceTransactionEvent {\n  /** An identifier for the order */\n  orderId: string;\n  /** The total value of the order  */\n  total: number;\n  /** Transaction affiliation (e.g. store where sale took place) */\n  affiliation?: string;\n  /** The amount of tax on the transaction */\n  tax?: number;\n  /** The amount of shipping costs for this transaction */\n  shipping?: number;\n  /** Delivery address, city */\n  city?: string;\n  /** Delivery address, state */\n  state?: string;\n  /** Delivery address, country */\n  country?: string;\n  /** Currency of the transaction */\n  currency?: string;\n}\n\n/**\n * Build an Ecommerce Transaction Event\n * Allows for tracking common ecommerce events, this event is usually used when\n * a consumer completes a transaction.\n *\n * @param event - Contains the properties for the Ecommerce Transactoion event\n * @return PayloadBuilder to be sent to {@link Core.track()}\n */\nexport function buildEcommerceTransaction(event: EcommerceTransactionEvent): PayloadBuilder {\n  const { orderId, total, affiliation, tax, shipping, city, state, country, currency } = event,\n    pb = payloadBuilder();\n  pb.add('e', 'tr'); // 'tr' for Transaction\n  pb.add('tr_id', orderId);\n  pb.add('tr_af', affiliation);\n  pb.add('tr_tt', total);\n  pb.add('tr_tx', tax);\n  pb.add('tr_sh', shipping);\n  pb.add('tr_ci', city);\n  pb.add('tr_st', state);\n  pb.add('tr_co', country);\n  pb.add('tr_cu', currency);\n\n  return pb;\n}\n\n/**\n * An Ecommerce Transaction Item\n * Related to the {@link EcommerceTransactionEvent}\n * Each Ecommerce Transaction may contain one or more EcommerceTransactionItem events\n */\nexport interface EcommerceTransactionItemEvent {\n  /** An identifier for the order */\n  orderId: string;\n  /** A Product Stock Keeping Unit (SKU) */\n  sku: string;\n  /** The price of the product */\n  price: number;\n  /** The name of the product */\n  name?: string;\n  /** The category the product belongs to */\n  category?: string;\n  /** The quanity of this product within the transaction */\n  quantity?: number;\n  /** The currency of the product for the transaction */\n  currency?: string;\n}\n\n/**\n * Build an Ecommerce Transaction Item Event\n * Related to the {@link buildEcommerceTransaction}\n * Each Ecommerce Transaction may contain one or more EcommerceTransactionItem events\n *\n * @param event - Contains the properties for the Ecommerce Transaction Item event\n * @return PayloadBuilder to be sent to {@link Core.track()}\n */\nexport function buildEcommerceTransactionItem(event: EcommerceTransactionItemEvent): PayloadBuilder {\n  const { orderId, sku, price, name, category, quantity, currency } = event,\n    pb = payloadBuilder();\n  pb.add('e', 'ti'); // 'tr' for Transaction Item\n  pb.add('ti_id', orderId);\n  pb.add('ti_sk', sku);\n  pb.add('ti_nm', name);\n  pb.add('ti_ca', category);\n  pb.add('ti_pr', price);\n  pb.add('ti_qu', quantity);\n  pb.add('ti_cu', currency);\n\n  return pb;\n}\n\n/**\n * A Screen View Event\n * Similar to a Page View but less focused on typical web properties\n * Often used for mobile applications as the user is presented with\n * new views as they performance navigation events\n */\nexport interface ScreenViewEvent {\n  /** The name of the screen */\n  name?: string;\n  /** The identifier of the screen */\n  id?: string;\n}\n\n/**\n * Build a Scren View Event\n * Similar to a Page View but less focused on typical web properties\n * Often used for mobile applications as the user is presented with\n * new views as they performance navigation events\n *\n * @param event - Contains the properties for the Screen View event. One or more properties must be included.\n * @return PayloadBuilder to be sent to {@link Core.track()}\n */\nexport function buildScreenView(event: ScreenViewEvent): PayloadBuilder {\n  const { name, id } = event;\n  return buildSelfDescribingEvent({\n    event: {\n      schema: 'iglu:com.snowplowanalytics.snowplow/screen_view/jsonschema/1-0-0',\n      data: removeEmptyProperties({ name, id }),\n    },\n  });\n}\n\n/**\n * A Link Click Event\n * Used when a user clicks on a link on a webpage, typically an anchor tag <a>\n */\nexport interface LinkClickEvent {\n  /** The target URL of the link */\n  targetUrl: string;\n  /** The ID of the element clicked if present */\n  elementId?: string;\n  /** An array of class names from the element clicked */\n  elementClasses?: Array<string>;\n  /** The target value of the element if present */\n  elementTarget?: string;\n  /** The content of the element if present and enabled */\n  elementContent?: string;\n}\n\n/**\n * Build a Link Click Event\n * Used when a user clicks on a link on a webpage, typically an anchor tag <a>\n *\n * @param event - Contains the properties for the Link Click event\n * @return PayloadBuilder to be sent to {@link Core.track()}\n */\nexport function buildLinkClick(event: LinkClickEvent): PayloadBuilder {\n  const { targetUrl, elementId, elementClasses, elementTarget, elementContent } = event;\n  const eventJson = {\n    schema: 'iglu:com.snowplowanalytics.snowplow/link_click/jsonschema/1-0-1',\n    data: removeEmptyProperties({ targetUrl, elementId, elementClasses, elementTarget, elementContent }),\n  };\n\n  return buildSelfDescribingEvent({ event: eventJson });\n}\n\n/**\n * An Ad Impression Event\n * Used to track an advertisement impression\n *\n * @remark\n * If you provide the cost field, you must also provide one of 'cpa', 'cpc', and 'cpm' for the costModel field.\n */\nexport interface AdImpressionEvent {\n  /** Identifier for the particular impression instance */\n  impressionId?: string;\n  /** The cost model for the campaign */\n  costModel?: 'cpa' | 'cpc' | 'cpm';\n  /** Advertisement cost */\n  cost?: number;\n  /** The destination URL of the advertisement */\n  targetUrl?: string;\n  /** Identifier for the ad banner being displayed */\n  bannerId?: string;\n  /** Identifier for the zone where the ad banner is located */\n  zoneId?: string;\n  /** Identifier for the advertiser which the campaign belongs to */\n  advertiserId?: string;\n  /** Identifier for the advertiser which the campaign belongs to */\n  campaignId?: string;\n}\n\n/**\n * Build a Ad Impression Event\n * Used to track an advertisement impression\n *\n * @remark\n * If you provide the cost field, you must also provide one of 'cpa', 'cpc', and 'cpm' for the costModel field.\n *\n * @param event - Contains the properties for the Ad Impression event\n * @return PayloadBuilder to be sent to {@link Core.track()}\n */\nexport function buildAdImpression(event: AdImpressionEvent): PayloadBuilder {\n  const { impressionId, costModel, cost, targetUrl, bannerId, zoneId, advertiserId, campaignId } = event;\n  const eventJson = {\n    schema: 'iglu:com.snowplowanalytics.snowplow/ad_impression/jsonschema/1-0-0',\n    data: removeEmptyProperties({\n      impressionId,\n      costModel,\n      cost,\n      targetUrl,\n      bannerId,\n      zoneId,\n      advertiserId,\n      campaignId,\n    }),\n  };\n\n  return buildSelfDescribingEvent({ event: eventJson });\n}\n\n/**\n * An Ad Click Event\n * Used to track an advertisement click\n *\n * @remark\n * If you provide the cost field, you must also provide one of 'cpa', 'cpc', and 'cpm' for the costModel field.\n */\nexport interface AdClickEvent {\n  /** The destination URL of the advertisement */\n  targetUrl: string;\n  /**\tIdentifier for the particular click instance */\n  clickId?: string;\n  /** The cost model for the campaign */\n  costModel?: 'cpa' | 'cpc' | 'cpm';\n  /** Advertisement cost */\n  cost?: number;\n  /** Identifier for the ad banner being displayed */\n  bannerId?: string;\n  /** Identifier for the zone where the ad banner is located */\n  zoneId?: string;\n  /** Identifier for the particular impression instance */\n  impressionId?: string;\n  /** Identifier for the advertiser which the campaign belongs to */\n  advertiserId?: string;\n  /** Identifier for the advertiser which the campaign belongs to */\n  campaignId?: string;\n}\n\n/**\n * Build a Ad Click Event\n * Used to track an advertisement click\n *\n * @remark\n * If you provide the cost field, you must also provide one of 'cpa', 'cpc', and 'cpm' for the costModel field.\n *\n * @param event - Contains the properties for the Ad Click event\n * @return PayloadBuilder to be sent to {@link Core.track()}\n */\nexport function buildAdClick(event: AdClickEvent): PayloadBuilder {\n  const { targetUrl, clickId, costModel, cost, bannerId, zoneId, impressionId, advertiserId, campaignId } = event;\n  const eventJson = {\n    schema: 'iglu:com.snowplowanalytics.snowplow/ad_click/jsonschema/1-0-0',\n    data: removeEmptyProperties({\n      targetUrl,\n      clickId,\n      costModel,\n      cost,\n      bannerId,\n      zoneId,\n      impressionId,\n      advertiserId,\n      campaignId,\n    }),\n  };\n\n  return buildSelfDescribingEvent({ event: eventJson });\n}\n\n/**\n * An Ad Conversion Event\n * Used to track an advertisement click\n *\n * @remark\n * If you provide the cost field, you must also provide one of 'cpa', 'cpc', and 'cpm' for the costModel field.\n */\nexport interface AdConversionEvent {\n  /** Identifier for the particular conversion instance */\n  conversionId?: string;\n  /** The cost model for the campaign */\n  costModel?: 'cpa' | 'cpc' | 'cpm';\n  /** Advertisement cost */\n  cost?: number;\n  /**\tConversion category */\n  category?: string;\n  /** The type of user interaction e.g. 'purchase' */\n  action?: string;\n  /** Describes the object of the conversion */\n  property?: string;\n  /** How much the conversion is initially worth */\n  initialValue?: number;\n  /** Identifier for the advertiser which the campaign belongs to */\n  advertiserId?: string;\n  /** Identifier for the advertiser which the campaign belongs to */\n  campaignId?: string;\n}\n\n/**\n * Build a Ad Conversion Event\n * Used to track an advertisement click\n *\n * @remark\n * If you provide the cost field, you must also provide one of 'cpa', 'cpc', and 'cpm' for the costModel field.\n *\n * @param event - Contains the properties for the Ad Conversion event\n * @return PayloadBuilder to be sent to {@link Core.track()}\n */\nexport function buildAdConversion(event: AdConversionEvent): PayloadBuilder {\n  const { conversionId, costModel, cost, category, action, property, initialValue, advertiserId, campaignId } = event;\n  const eventJson = {\n    schema: 'iglu:com.snowplowanalytics.snowplow/ad_conversion/jsonschema/1-0-0',\n    data: removeEmptyProperties({\n      conversionId,\n      costModel,\n      cost,\n      category,\n      action,\n      property,\n      initialValue,\n      advertiserId,\n      campaignId,\n    }),\n  };\n\n  return buildSelfDescribingEvent({ event: eventJson });\n}\n\n/**\n * A Social Interaction Event\n * Social tracking will be used to track the way users interact\n * with Facebook, Twitter and Google + widgets\n * e.g. to capture “like this” or “tweet this” events.\n */\nexport interface SocialInteractionEvent {\n  /** Social action performed */\n  action: string;\n  /** Social network */\n  network: string;\n  /** Object social action is performed on */\n  target?: string;\n}\n\n/**\n * Build a Social Interaction Event\\\n * Social tracking will be used to track the way users interact\n * with Facebook, Twitter and Google + widgets\n * e.g. to capture “like this” or “tweet this” events.\n *\n * @param event - Contains the properties for the Social Interaction event\n * @return PayloadBuilder to be sent to {@link Core.track()}\n */\nexport function buildSocialInteraction(event: SocialInteractionEvent): PayloadBuilder {\n  const { action, network, target } = event;\n  const eventJson = {\n    schema: 'iglu:com.snowplowanalytics.snowplow/social_interaction/jsonschema/1-0-0',\n    data: removeEmptyProperties({ action, network, target }),\n  };\n\n  return buildSelfDescribingEvent({ event: eventJson });\n}\n\n/**\n * An Add To Cart Event\n * For tracking users adding items from a cart\n * on an ecommerce site.\n */\nexport interface AddToCartEvent {\n  /** A Product Stock Keeping Unit (SKU) */\n  sku: string;\n  /** The number added to the cart */\n  quantity: number;\n  /** The name of the product */\n  name?: string;\n  /** The category of the product */\n  category?: string;\n  /** The price of the product */\n  unitPrice?: number;\n  /** The currency of the product */\n  currency?: string;\n}\n\n/**\n * Build a Add To Cart Event\n * For tracking users adding items from a cart\n * on an ecommerce site.\n *\n * @param event - Contains the properties for the Add To Cart event\n * @return PayloadBuilder to be sent to {@link Core.track()}\n */\nexport function buildAddToCart(event: AddToCartEvent): PayloadBuilder {\n  const { sku, quantity, name, category, unitPrice, currency } = event;\n  return buildSelfDescribingEvent({\n    event: {\n      schema: 'iglu:com.snowplowanalytics.snowplow/add_to_cart/jsonschema/1-0-0',\n      data: removeEmptyProperties({\n        sku,\n        quantity,\n        name,\n        category,\n        unitPrice,\n        currency,\n      }),\n    },\n  });\n}\n\n/**\n * An Remove To Cart Event\n * For tracking users removing items from a cart\n * on an ecommerce site.\n */\nexport interface RemoveFromCartEvent {\n  /** A Product Stock Keeping Unit (SKU) */\n  sku: string;\n  /** The number removed from the cart */\n  quantity: number;\n  /** The name of the product */\n  name?: string;\n  /** The category of the product */\n  category?: string;\n  /** The price of the product */\n  unitPrice?: number;\n  /** The currency of the product */\n  currency?: string;\n}\n\n/**\n * Build a Remove From Cart Event\n * For tracking users removing items from a cart\n * on an ecommerce site.\n *\n * @param event - Contains the properties for the Remove From Cart event\n * @return PayloadBuilder to be sent to {@link Core.track()}\n */\nexport function buildRemoveFromCart(event: RemoveFromCartEvent): PayloadBuilder {\n  const { sku, quantity, name, category, unitPrice, currency } = event;\n  return buildSelfDescribingEvent({\n    event: {\n      schema: 'iglu:com.snowplowanalytics.snowplow/remove_from_cart/jsonschema/1-0-0',\n      data: removeEmptyProperties({\n        sku,\n        quantity,\n        name,\n        category,\n        unitPrice,\n        currency,\n      }),\n    },\n  });\n}\n\n/**\n * Represents either a Form Focus or Form Change event\n * When a user focuses on a form element or when a user makes a\n * change to a form element.\n */\nexport interface FormFocusOrChangeEvent {\n  /** The schema which will be used for the event */\n  schema: 'change_form' | 'focus_form';\n  /** The ID of the form which the element belongs to */\n  formId: string;\n  /** The element ID which the user is interacting with */\n  elementId: string;\n  /** The name of the node (\"INPUT\", \"TEXTAREA\", \"SELECT\") */\n  nodeName: string;\n  /** The value of the element at the time of the event firing */\n  value: string | null;\n  /** The type of element (e.g. \"datetime\", \"text\", \"radio\", etc.) */\n  type?: string | null;\n  /** The class names on the element */\n  elementClasses?: Array<string> | null;\n}\n\n/**\n * Build a Form Focus or Change Form Event based on schema property\n * When a user focuses on a form element or when a user makes a\n * change to a form element.\n *\n * @param event - Contains the properties for the Form Focus or Change Form event\n * @return PayloadBuilder to be sent to {@link Core.track()}\n */\nexport function buildFormFocusOrChange(event: FormFocusOrChangeEvent): PayloadBuilder {\n  let event_schema = '';\n  const { schema, formId, elementId, nodeName, elementClasses, value, type } = event;\n  const event_data: Record<string, unknown> = { formId, elementId, nodeName, elementClasses, value };\n  if (schema === 'change_form') {\n    event_schema = 'iglu:com.snowplowanalytics.snowplow/change_form/jsonschema/1-0-0';\n    event_data.type = type;\n  } else if (schema === 'focus_form') {\n    event_schema = 'iglu:com.snowplowanalytics.snowplow/focus_form/jsonschema/1-0-0';\n    event_data.elementType = type;\n  }\n  return buildSelfDescribingEvent({\n    event: {\n      schema: event_schema,\n      data: removeEmptyProperties(event_data, { value: true }),\n    },\n  });\n}\n\n/**\n * A representation of an element within a form\n */\nexport type FormElement = {\n  /** The name of the element */\n  name: string;\n  /** The current value of the element */\n  value: string | null;\n  /** The name of the node (\"INPUT\", \"TEXTAREA\", \"SELECT\") */\n  nodeName: string;\n  /** The type of element (e.g. \"datetime\", \"text\", \"radio\", etc.) */\n  type?: string | null;\n};\n\n/**\n * A Form Submission Event\n * Used to track when a user submits a form\n */\nexport interface FormSubmissionEvent {\n  /** The ID of the form */\n  formId: string;\n  /** The class names on the form */\n  formClasses?: Array<string>;\n  /** The elements contained within the form */\n  elements?: Array<FormElement>;\n}\n\n/**\n * Build a Form Submission Event\n * Used to track when a user submits a form\n *\n * @param event - Contains the properties for the Form Submission event\n * @return PayloadBuilder to be sent to {@link Core.track()}\n */\nexport function buildFormSubmission(event: FormSubmissionEvent): PayloadBuilder {\n  const { formId, formClasses, elements } = event;\n  return buildSelfDescribingEvent({\n    event: {\n      schema: 'iglu:com.snowplowanalytics.snowplow/submit_form/jsonschema/1-0-0',\n      data: removeEmptyProperties({ formId, formClasses, elements }),\n    },\n  });\n}\n\n/**\n * A Site Search Event\n * Used when a user performs a search action on a page\n */\nexport interface SiteSearchEvent {\n  /** The terms of the search */\n  terms: Array<string>;\n  /** Any filters which have been applied to the search */\n  filters?: Record<string, string | boolean>;\n  /** The total number of results for this search */\n  totalResults?: number;\n  /** The number of visible results on the page */\n  pageResults?: number;\n}\n\n/**\n * Build a Site Search Event\n * Used when a user performs a search action on a page\n *\n * @param event - Contains the properties for the Site Search event\n * @return PayloadBuilder to be sent to {@link Core.track()}\n */\nexport function buildSiteSearch(event: SiteSearchEvent): PayloadBuilder {\n  const { terms, filters, totalResults, pageResults } = event;\n  return buildSelfDescribingEvent({\n    event: {\n      schema: 'iglu:com.snowplowanalytics.snowplow/site_search/jsonschema/1-0-0',\n      data: removeEmptyProperties({ terms, filters, totalResults, pageResults }),\n    },\n  });\n}\n\n/**\n * A Consent Withdrawn Event\n * Used for tracking when a user withdraws their consent\n */\nexport interface ConsentWithdrawnEvent {\n  /** Specifies whether all consent should be withdrawn */\n  all: boolean;\n  /** Identifier for the document withdrawing consent */\n  id?: string;\n  /** Version of the document withdrawing consent */\n  version?: string;\n  /** Name of the document withdrawing consent */\n  name?: string;\n  /** Description of the document withdrawing consent */\n  description?: string;\n}\n\n/**\n * Build a Consent Withdrawn Event\n * Used for tracking when a user withdraws their consent\n *\n * @param event - Contains the properties for the Consent Withdrawn event\n * @return An object containing the PayloadBuilder to be sent to {@link Core.track()} and a 'consent_document' context\n */\nexport function buildConsentWithdrawn(event: ConsentWithdrawnEvent) {\n  const { all, id, version, name, description } = event;\n  const documentJson = {\n    schema: 'iglu:com.snowplowanalytics.snowplow/consent_document/jsonschema/1-0-0',\n    data: removeEmptyProperties({ id, version, name, description }),\n  };\n\n  return {\n    event: buildSelfDescribingEvent({\n      event: {\n        schema: 'iglu:com.snowplowanalytics.snowplow/consent_withdrawn/jsonschema/1-0-0',\n        data: removeEmptyProperties({\n          all: all,\n        }),\n      },\n    }),\n    context: [documentJson],\n  };\n}\n\n/**\n * A Consent Granted Event\n * Used for tracking when a user grants their consent\n */\nexport interface ConsentGrantedEvent {\n  /** Identifier for the document granting consent */\n  id: string;\n  /** Version of the document granting consent */\n  version: string;\n  /** Name of the document granting consent */\n  name?: string;\n  /** Description of the document granting consent */\n  description?: string;\n  /** When the consent expires */\n  expiry?: string;\n}\n\n/**\n * Build a Consent Granted Event\n * Used for tracking when a user grants their consent\n *\n * @param event - Contains the properties for the Consent Granted event\n * @return An object containing the PayloadBuilder to be sent to {@link Core.track()} and a 'consent_document' context\n */\nexport function buildConsentGranted(event: ConsentGrantedEvent) {\n  const { expiry, id, version, name, description } = event;\n  const documentJson = {\n    schema: 'iglu:com.snowplowanalytics.snowplow/consent_document/jsonschema/1-0-0',\n    data: removeEmptyProperties({ id, version, name, description }),\n  };\n\n  return {\n    event: buildSelfDescribingEvent({\n      event: {\n        schema: 'iglu:com.snowplowanalytics.snowplow/consent_granted/jsonschema/1-0-0',\n        data: removeEmptyProperties({\n          expiry: expiry,\n        }),\n      },\n    }),\n    context: [documentJson],\n  };\n}\n\n/**\n * Returns a copy of a JSON with undefined and null properties removed\n *\n * @param event - JSON object to clean\n * @param exemptFields - Set of fields which should not be removed even if empty\n * @return A cleaned copy of eventJson\n */\nfunction removeEmptyProperties(\n  event: Record<string, unknown>,\n  exemptFields: Record<string, boolean> = {}\n): Record<string, unknown> {\n  const ret: Record<string, unknown> = {};\n  for (const k in event) {\n    if (exemptFields[k] || (event[k] !== null && typeof event[k] !== 'undefined')) {\n      ret[k] = event[k];\n    }\n  }\n  return ret;\n}\n","/*\n * Copyright (c) 2021 Snowplow Analytics Ltd, 2010 Anthon Pang\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are met:\n *\n * 1. Redistributions of source code must retain the above copyright notice, this\n *    list of conditions and the following disclaimer.\n *\n * 2. Redistributions in binary form must reproduce the above copyright notice,\n *    this list of conditions and the following disclaimer in the documentation\n *    and/or other materials provided with the distribution.\n *\n * 3. Neither the name of the copyright holder nor the names of its\n *    contributors may be used to endorse or promote products derived from\n *    this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\n * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\n * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\n * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\n/**\n * A library of helpful methods for Snowplow JavaScript Trackers\n * Contains Context Generation, Event Payload Builders, and Core Plugins.\n *\n * @packageDocumentation\n */\n\nimport { version as v } from '../package.json';\nexport const version = v;\n\nexport * from './contexts';\nexport * from './plugins';\nexport * from './payload';\nexport * from './core';\nexport * from './logger';\n"]},"metadata":{},"sourceType":"module"}