{"ast":null,"code":"/*!\n * Browser tracker for Snowplow v3.1.0 (http://bit.ly/sp-js)\n * Copyright 2021 Snowplow Analytics Ltd, 2010 Anthon Pang\n * Licensed under BSD-3-Clause\n */\nimport { dispatchToTrackers, createSharedState, addTracker } from '@snowplow/browser-tracker-core';\nimport { buildStructEvent, buildSelfDescribingEvent, version } from '@snowplow/tracker-core';\nexport { version } from '@snowplow/tracker-core';\n/*\n * Copyright (c) 2021 Snowplow Analytics Ltd, 2010 Anthon Pang\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are met:\n *\n * 1. Redistributions of source code must retain the above copyright notice, this\n *    list of conditions and the following disclaimer.\n *\n * 2. Redistributions in binary form must reproduce the above copyright notice,\n *    this list of conditions and the following disclaimer in the documentation\n *    and/or other materials provided with the distribution.\n *\n * 3. Neither the name of the copyright holder nor the names of its\n *    contributors may be used to endorse or promote products derived from\n *    this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\n * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\n * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\n * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\n/**\n * Expires current session and starts a new session.\n *\n * @param trackers - The tracker identifiers which will have their session refreshed\n */\n\nfunction newSession(trackers) {\n  dispatchToTrackers(trackers, function (t) {\n    t.newSession();\n  });\n}\n/**\n * Override referrer\n *\n * @param url - Custom Referrer which will be used as override\n * @param trackers - The tracker identifiers which will be configured\n */\n\n\nfunction setReferrerUrl(url, trackers) {\n  dispatchToTrackers(trackers, function (t) {\n    t.setReferrerUrl(url);\n  });\n}\n/**\n * Override url\n *\n * @param url - Custom URL which will be used as override\n * @param trackers - The tracker identifiers which will be configured\n */\n\n\nfunction setCustomUrl(url, trackers) {\n  dispatchToTrackers(trackers, function (t) {\n    t.setCustomUrl(url);\n  });\n}\n/**\n * Override document.title\n *\n * @param title - Document title which will be used as override\n * @param trackers - The tracker identifiers which will be configured\n */\n\n\nfunction setDocumentTitle(title, trackers) {\n  dispatchToTrackers(trackers, function (t) {\n    t.setDocumentTitle(title);\n  });\n}\n/**\n * Strip hash tag (or anchor) from URL\n *\n * @param enable - Whether to enable stripping of hash\n * @param trackers - The tracker identifiers which will be configured\n */\n\n\nfunction discardHashTag(enable, trackers) {\n  dispatchToTrackers(trackers, function (t) {\n    t.discardHashTag(enable);\n  });\n}\n/**\n * Strip braces from URL\n *\n * @param enable - Whther to enable stripping of braces\n * @param trackers - The tracker identifiers which will be configured\n */\n\n\nfunction discardBrace(enable, trackers) {\n  dispatchToTrackers(trackers, function (t) {\n    t.discardBrace(enable);\n  });\n}\n/**\n * Set first-party cookie path\n *\n * @param path - The path which will be used when setting cookies\n * @param trackers - The tracker identifiers which will be configured\n */\n\n\nfunction setCookiePath(path, trackers) {\n  dispatchToTrackers(trackers, function (t) {\n    t.setCookiePath(path);\n  });\n}\n/**\n * Set visitor cookie timeout (in seconds)\n *\n * @param timeout - The timeout until cookies will expire\n * @param trackers - The tracker identifiers which will be configured\n */\n\n\nfunction setVisitorCookieTimeout(timeout, trackers) {\n  dispatchToTrackers(trackers, function (t) {\n    t.setVisitorCookieTimeout(timeout);\n  });\n}\n/**\n * Enable querystring decoration for links pasing a filter\n *\n * @param crossDomainLinker - Function used to determine which links to decorate\n * @param trackers - The tracker identifiers which will be configured\n */\n\n\nfunction crossDomainLinker(crossDomainLinkerCriterion, trackers) {\n  dispatchToTrackers(trackers, function (t) {\n    t.crossDomainLinker(crossDomainLinkerCriterion);\n  });\n}\n/**\n * Enables page activity tracking (sends page pings to the Collector regularly).\n *\n * @param configuration - The activity tracking configuration\n * @param trackers - The tracker identifiers which will be configured\n */\n\n\nfunction enableActivityTracking(configuration, trackers) {\n  dispatchToTrackers(trackers, function (t) {\n    t.enableActivityTracking(configuration);\n  });\n}\n/**\n * Enables page activity tracking (replaces collector ping with callback).\n *\n * @param configuration - The activity tracking callback configuration\n * @param trackers - The tracker identifiers which will be configured\n */\n\n\nfunction enableActivityTrackingCallback(configuration, trackers) {\n  dispatchToTrackers(trackers, function (t) {\n    t.enableActivityTrackingCallback(configuration);\n  });\n}\n/**\n * Triggers the activityHandler manually to allow external user defined activity. i.e. While watching a video\n *\n * @param trackers - The tracker identifiers which will be updated\n */\n\n\nfunction updatePageActivity(trackers) {\n  dispatchToTrackers(trackers, function (t) {\n    t.updatePageActivity();\n  });\n}\n/**\n * Sets the opt out cookie.\n *\n * @param name - of the opt out cookie\n * @param trackers - The tracker identifiers which will be configured\n */\n\n\nfunction setOptOutCookie(name, trackers) {\n  dispatchToTrackers(trackers, function (t) {\n    t.setOptOutCookie(name);\n  });\n}\n/**\n * Set the business-defined user ID for this user.\n *\n * @param userId - The business-defined user ID\n * @param trackers - The tracker identifiers which will be configured\n */\n\n\nfunction setUserId(userId, trackers) {\n  dispatchToTrackers(trackers, function (t) {\n    t.setUserId(userId);\n  });\n}\n/**\n * Set the business-defined user ID for this user using the location querystring.\n *\n * @param querystringField - Name of a querystring name-value pair\n * @param trackers - The tracker identifiers which will be configured\n */\n\n\nfunction setUserIdFromLocation(querystringField, trackers) {\n  dispatchToTrackers(trackers, function (t) {\n    t.setUserIdFromLocation(querystringField);\n  });\n}\n/**\n * Set the business-defined user ID for this user using the referrer querystring.\n *\n * @param querystringField - Name of a querystring name-value pair\n * @param trackers - The tracker identifiers which will be configured\n */\n\n\nfunction setUserIdFromReferrer(querystringField, trackers) {\n  dispatchToTrackers(trackers, function (t) {\n    t.setUserIdFromReferrer(querystringField);\n  });\n}\n/**\n * Set the business-defined user ID for this user to the value of a cookie.\n *\n * @param cookieName - Name of the cookie whose value will be assigned to businessUserId\n * @param trackers - The tracker identifiers which will be configured\n */\n\n\nfunction setUserIdFromCookie(cookieName, trackers) {\n  dispatchToTrackers(trackers, function (t) {\n    t.setUserIdFromCookie(cookieName);\n  });\n}\n/**\n * Specify the Snowplow collector URL. Specific http or https to force it\n * or leave it off to match the website protocol.\n *\n * @param collectorUrl - The collector URL, with or without protocol\n * @param trackers - The tracker identifiers which will be configured\n */\n\n\nfunction setCollectorUrl(collectorUrl, trackers) {\n  dispatchToTrackers(trackers, function (t) {\n    t.setCollectorUrl(collectorUrl);\n  });\n}\n/**\n * Set the buffer size\n * Can be useful if you want to stop batching requests to ensure events start\n * sending closer to event creation\n *\n * @param newBufferSize - The value with which to update the bufferSize to\n * @param trackers - The tracker identifiers which will be flushed\n */\n\n\nfunction setBufferSize(newBufferSize, trackers) {\n  dispatchToTrackers(trackers, function (t) {\n    t.setBufferSize(newBufferSize);\n  });\n}\n/**\n * Send all events in the outQueue\n * Only need to use this when sending events with a bufferSize of at least 2\n *\n * @param configuration - The configuration to use following flushing the buffer\n * @param trackers - The tracker identifiers which will be flushed\n */\n\n\nfunction flushBuffer(configuration, trackers) {\n  dispatchToTrackers(trackers, function (t) {\n    t.flushBuffer(configuration);\n  });\n}\n/**\n * Track a visit to a web page\n *\n * @param event - The Page View Event properties\n * @param trackers - The tracker identifiers which the event will be sent to\n */\n\n\nfunction trackPageView(event, trackers) {\n  dispatchToTrackers(trackers, function (t) {\n    t.trackPageView(event);\n  });\n}\n/**\n * Track a structured event\n * A classic style of event tracking, allows for easier movement between analytics\n * systems. A loosely typed event, creating a Self Describing event is preferred, but\n * useful for interoperability.\n *\n * @param event - The Structured Event properties\n * @param trackers - The tracker identifiers which the event will be sent to\n */\n\n\nfunction trackStructEvent(event, trackers) {\n  dispatchToTrackers(trackers, function (t) {\n    t.core.track(buildStructEvent(event), event.context, event.timestamp);\n  });\n}\n/**\n * Track a self-describing event happening on this page.\n * A custom event type, allowing for an event to be tracked using your own custom schema\n * and a data object which conforms to the supplied schema\n *\n * @param event - The event information\n * @param trackers - The tracker identifiers which the event will be sent to\n */\n\n\nfunction trackSelfDescribingEvent(event, trackers) {\n  dispatchToTrackers(trackers, function (t) {\n    t.core.track(buildSelfDescribingEvent({\n      event: event.event\n    }), event.context, event.timestamp);\n  });\n}\n/**\n * All provided contexts will be sent with every event\n *\n * @param contexts - An array of contexts or conditional contexts\n * @param trackers - The tracker identifiers which the global contexts will be added to\n */\n\n\nfunction addGlobalContexts(contexts, trackers) {\n  dispatchToTrackers(trackers, function (t) {\n    t.core.addGlobalContexts(contexts);\n  });\n}\n/**\n * All provided contexts will no longer be sent with every event\n *\n * @param contexts - An array of contexts or conditional contexts\n * @param trackers - The tracker identifiers which the global contexts will be remove from\n */\n\n\nfunction removeGlobalContexts(contexts, trackers) {\n  dispatchToTrackers(trackers, function (t) {\n    t.core.removeGlobalContexts(contexts);\n  });\n}\n/**\n * Clear all global contexts that are sent with events\n *\n * @param trackers - The tracker identifiers which the global contexts will be cleared from\n */\n\n\nfunction clearGlobalContexts(trackers) {\n  dispatchToTrackers(trackers, function (t) {\n    t.core.clearGlobalContexts();\n  });\n}\n/**\n * Stop regenerating `pageViewId` (available from `web_page` context)\n *\n * @param trackers - The tracker identifiers which the event will preserve their Page View Ids\n */\n\n\nfunction preservePageViewId(trackers) {\n  dispatchToTrackers(trackers, function (t) {\n    t.preservePageViewId();\n  });\n}\n/**\n * Disables anonymous tracking if active (ie. tracker initialized with `anonymousTracking`)\n * For stateStorageStrategy override, uses supplied value first,\n * falls back to one defined in initial config, otherwise uses cookieAndLocalStorage.\n *\n * @param configuration - The configuration for disabling anonymous tracking\n * @param trackers - The tracker identifiers which the event will be sent to\n */\n\n\nfunction disableAnonymousTracking(configuration, trackers) {\n  dispatchToTrackers(trackers, function (t) {\n    t.disableAnonymousTracking(configuration);\n  });\n}\n/**\n * Enables anonymous tracking (ie. tracker initialized without `anonymousTracking`)\n *\n * @param configuration - The configuration for enabling anonymous tracking\n * @param trackers - The tracker identifiers which the event will be sent to\n */\n\n\nfunction enableAnonymousTracking(configuration, trackers) {\n  dispatchToTrackers(trackers, function (t) {\n    t.enableAnonymousTracking(configuration);\n  });\n}\n/**\n * Clears all cookies and local storage containing user and session identifiers\n *\n * @param trackers - The tracker identifiers which the event will be sent to\n */\n\n\nfunction clearUserData(configuration, trackers) {\n  dispatchToTrackers(trackers, function (t) {\n    t.clearUserData(configuration);\n  });\n}\n/**\n * Add a plugin into the plugin collection after trackers have already been initialised\n *\n * @param configuration - The plugin to add\n * @param trackers - The tracker identifiers which the plugin will be added to\n */\n\n\nfunction addPlugin(configuration, trackers) {\n  dispatchToTrackers(trackers, function (t) {\n    t.addPlugin(configuration);\n  });\n}\n/*\n * Copyright (c) 2021 Snowplow Analytics Ltd, 2010 Anthon Pang\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are met:\n *\n * 1. Redistributions of source code must retain the above copyright notice, this\n *    list of conditions and the following disclaimer.\n *\n * 2. Redistributions in binary form must reproduce the above copyright notice,\n *    this list of conditions and the following disclaimer in the documentation\n *    and/or other materials provided with the distribution.\n *\n * 3. Neither the name of the copyright holder nor the names of its\n *    contributors may be used to endorse or promote products derived from\n *    this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\n * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\n * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\n * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\n\nvar state = typeof window !== 'undefined' ? createSharedState() : undefined;\n/**\n * Initialise a new tracker\n *\n * @param trackerId - The tracker id - also known as tracker namespace\n * @param endpoint - Collector endpoint in the form collector.mysite.com\n * @param configuration - The initialisation options of the tracker\n */\n\nfunction newTracker(trackerId, endpoint, configuration) {\n  if (configuration === void 0) {\n    configuration = {};\n  }\n\n  if (state) {\n    return addTracker(trackerId, trackerId, \"js-\" + version, endpoint, state, configuration);\n  } else {\n    return undefined;\n  }\n}\n\nexport { addGlobalContexts, addPlugin, clearGlobalContexts, clearUserData, crossDomainLinker, disableAnonymousTracking, discardBrace, discardHashTag, enableActivityTracking, enableActivityTrackingCallback, enableAnonymousTracking, flushBuffer, newSession, newTracker, preservePageViewId, removeGlobalContexts, setBufferSize, setCollectorUrl, setCookiePath, setCustomUrl, setDocumentTitle, setOptOutCookie, setReferrerUrl, setUserId, setUserIdFromCookie, setUserIdFromLocation, setUserIdFromReferrer, setVisitorCookieTimeout, trackPageView, trackSelfDescribingEvent, trackStructEvent, updatePageActivity };","map":{"version":3,"sources":["../src/api.ts","../src/index.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright (c) 2021 Snowplow Analytics Ltd, 2010 Anthon Pang\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are met:\n *\n * 1. Redistributions of source code must retain the above copyright notice, this\n *    list of conditions and the following disclaimer.\n *\n * 2. Redistributions in binary form must reproduce the above copyright notice,\n *    this list of conditions and the following disclaimer in the documentation\n *    and/or other materials provided with the distribution.\n *\n * 3. Neither the name of the copyright holder nor the names of its\n *    contributors may be used to endorse or promote products derived from\n *    this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\n * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\n * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\n * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport {\n  ActivityTrackingConfiguration,\n  ActivityTrackingConfigurationCallback,\n  BrowserPluginConfiguration,\n  DisableAnonymousTrackingConfiguration,\n  EnableAnonymousTrackingConfiguration,\n  FlushBufferConfiguration,\n  PageViewEvent,\n  dispatchToTrackers,\n  ClearUserDataConfiguration,\n} from '@snowplow/browser-tracker-core';\nimport {\n  buildSelfDescribingEvent,\n  buildStructEvent,\n  CommonEventProperties,\n  ConditionalContextProvider,\n  ContextPrimitive,\n  SelfDescribingEvent,\n  SelfDescribingJson,\n  StructuredEvent,\n} from '@snowplow/tracker-core';\n\nexport {\n  ActivityTrackingConfiguration,\n  ActivityTrackingConfigurationCallback,\n  BrowserPluginConfiguration,\n  FlushBufferConfiguration,\n  PageViewEvent,\n  EnableAnonymousTrackingConfiguration,\n  DisableAnonymousTrackingConfiguration,\n  ConditionalContextProvider,\n  ContextPrimitive,\n  SelfDescribingEvent,\n  SelfDescribingJson,\n  CommonEventProperties,\n  StructuredEvent,\n};\n\n/**\n * Expires current session and starts a new session.\n *\n * @param trackers - The tracker identifiers which will have their session refreshed\n */\nexport function newSession(trackers?: Array<string>) {\n  dispatchToTrackers(trackers, (t) => {\n    t.newSession();\n  });\n}\n\n/**\n * Override referrer\n *\n * @param url - Custom Referrer which will be used as override\n * @param trackers - The tracker identifiers which will be configured\n */\nexport function setReferrerUrl(url: string, trackers?: Array<string>) {\n  dispatchToTrackers(trackers, (t) => {\n    t.setReferrerUrl(url);\n  });\n}\n\n/**\n * Override url\n *\n * @param url - Custom URL which will be used as override\n * @param trackers - The tracker identifiers which will be configured\n */\nexport function setCustomUrl(url: string, trackers?: Array<string>) {\n  dispatchToTrackers(trackers, (t) => {\n    t.setCustomUrl(url);\n  });\n}\n\n/**\n * Override document.title\n *\n * @param title - Document title which will be used as override\n * @param trackers - The tracker identifiers which will be configured\n */\nexport function setDocumentTitle(title: string, trackers?: Array<string>) {\n  dispatchToTrackers(trackers, (t) => {\n    t.setDocumentTitle(title);\n  });\n}\n\n/**\n * Strip hash tag (or anchor) from URL\n *\n * @param enable - Whether to enable stripping of hash\n * @param trackers - The tracker identifiers which will be configured\n */\nexport function discardHashTag(enable: boolean, trackers?: Array<string>) {\n  dispatchToTrackers(trackers, (t) => {\n    t.discardHashTag(enable);\n  });\n}\n\n/**\n * Strip braces from URL\n *\n * @param enable - Whther to enable stripping of braces\n * @param trackers - The tracker identifiers which will be configured\n */\nexport function discardBrace(enable: boolean, trackers?: Array<string>) {\n  dispatchToTrackers(trackers, (t) => {\n    t.discardBrace(enable);\n  });\n}\n\n/**\n * Set first-party cookie path\n *\n * @param path - The path which will be used when setting cookies\n * @param trackers - The tracker identifiers which will be configured\n */\nexport function setCookiePath(path: string, trackers?: Array<string>) {\n  dispatchToTrackers(trackers, (t) => {\n    t.setCookiePath(path);\n  });\n}\n\n/**\n * Set visitor cookie timeout (in seconds)\n *\n * @param timeout - The timeout until cookies will expire\n * @param trackers - The tracker identifiers which will be configured\n */\nexport function setVisitorCookieTimeout(timeout: number, trackers?: Array<string>) {\n  dispatchToTrackers(trackers, (t) => {\n    t.setVisitorCookieTimeout(timeout);\n  });\n}\n\n/**\n * Enable querystring decoration for links pasing a filter\n *\n * @param crossDomainLinker - Function used to determine which links to decorate\n * @param trackers - The tracker identifiers which will be configured\n */\nexport function crossDomainLinker(\n  crossDomainLinkerCriterion: (elt: HTMLAnchorElement | HTMLAreaElement) => boolean,\n  trackers?: Array<string>\n) {\n  dispatchToTrackers(trackers, (t) => {\n    t.crossDomainLinker(crossDomainLinkerCriterion);\n  });\n}\n\n/**\n * Enables page activity tracking (sends page pings to the Collector regularly).\n *\n * @param configuration - The activity tracking configuration\n * @param trackers - The tracker identifiers which will be configured\n */\nexport function enableActivityTracking(configuration: ActivityTrackingConfiguration, trackers?: Array<string>) {\n  dispatchToTrackers(trackers, (t) => {\n    t.enableActivityTracking(configuration);\n  });\n}\n\n/**\n * Enables page activity tracking (replaces collector ping with callback).\n *\n * @param configuration - The activity tracking callback configuration\n * @param trackers - The tracker identifiers which will be configured\n */\nexport function enableActivityTrackingCallback(\n  configuration: ActivityTrackingConfiguration & ActivityTrackingConfigurationCallback,\n  trackers?: Array<string>\n) {\n  dispatchToTrackers(trackers, (t) => {\n    t.enableActivityTrackingCallback(configuration);\n  });\n}\n\n/**\n * Triggers the activityHandler manually to allow external user defined activity. i.e. While watching a video\n *\n * @param trackers - The tracker identifiers which will be updated\n */\nexport function updatePageActivity(trackers?: Array<string>) {\n  dispatchToTrackers(trackers, (t) => {\n    t.updatePageActivity();\n  });\n}\n\n/**\n * Sets the opt out cookie.\n *\n * @param name - of the opt out cookie\n * @param trackers - The tracker identifiers which will be configured\n */\nexport function setOptOutCookie(name: string, trackers?: Array<string>) {\n  dispatchToTrackers(trackers, (t) => {\n    t.setOptOutCookie(name);\n  });\n}\n\n/**\n * Set the business-defined user ID for this user.\n *\n * @param userId - The business-defined user ID\n * @param trackers - The tracker identifiers which will be configured\n */\nexport function setUserId(userId: string, trackers?: Array<string>) {\n  dispatchToTrackers(trackers, (t) => {\n    t.setUserId(userId);\n  });\n}\n\n/**\n * Set the business-defined user ID for this user using the location querystring.\n *\n * @param querystringField - Name of a querystring name-value pair\n * @param trackers - The tracker identifiers which will be configured\n */\nexport function setUserIdFromLocation(querystringField: string, trackers?: Array<string>) {\n  dispatchToTrackers(trackers, (t) => {\n    t.setUserIdFromLocation(querystringField);\n  });\n}\n\n/**\n * Set the business-defined user ID for this user using the referrer querystring.\n *\n * @param querystringField - Name of a querystring name-value pair\n * @param trackers - The tracker identifiers which will be configured\n */\nexport function setUserIdFromReferrer(querystringField: string, trackers?: Array<string>) {\n  dispatchToTrackers(trackers, (t) => {\n    t.setUserIdFromReferrer(querystringField);\n  });\n}\n\n/**\n * Set the business-defined user ID for this user to the value of a cookie.\n *\n * @param cookieName - Name of the cookie whose value will be assigned to businessUserId\n * @param trackers - The tracker identifiers which will be configured\n */\nexport function setUserIdFromCookie(cookieName: string, trackers?: Array<string>) {\n  dispatchToTrackers(trackers, (t) => {\n    t.setUserIdFromCookie(cookieName);\n  });\n}\n\n/**\n * Specify the Snowplow collector URL. Specific http or https to force it\n * or leave it off to match the website protocol.\n *\n * @param collectorUrl - The collector URL, with or without protocol\n * @param trackers - The tracker identifiers which will be configured\n */\nexport function setCollectorUrl(collectorUrl: string, trackers?: Array<string>) {\n  dispatchToTrackers(trackers, (t) => {\n    t.setCollectorUrl(collectorUrl);\n  });\n}\n\n/**\n * Set the buffer size\n * Can be useful if you want to stop batching requests to ensure events start\n * sending closer to event creation\n *\n * @param newBufferSize - The value with which to update the bufferSize to\n * @param trackers - The tracker identifiers which will be flushed\n */\nexport function setBufferSize(newBufferSize: number, trackers?: Array<string>) {\n  dispatchToTrackers(trackers, (t) => {\n    t.setBufferSize(newBufferSize);\n  });\n}\n\n/**\n * Send all events in the outQueue\n * Only need to use this when sending events with a bufferSize of at least 2\n *\n * @param configuration - The configuration to use following flushing the buffer\n * @param trackers - The tracker identifiers which will be flushed\n */\nexport function flushBuffer(configuration?: FlushBufferConfiguration, trackers?: Array<string>) {\n  dispatchToTrackers(trackers, (t) => {\n    t.flushBuffer(configuration);\n  });\n}\n\n/**\n * Track a visit to a web page\n *\n * @param event - The Page View Event properties\n * @param trackers - The tracker identifiers which the event will be sent to\n */\nexport function trackPageView(event?: PageViewEvent & CommonEventProperties, trackers?: Array<string>) {\n  dispatchToTrackers(trackers, (t) => {\n    t.trackPageView(event);\n  });\n}\n\n/**\n * Track a structured event\n * A classic style of event tracking, allows for easier movement between analytics\n * systems. A loosely typed event, creating a Self Describing event is preferred, but\n * useful for interoperability.\n *\n * @param event - The Structured Event properties\n * @param trackers - The tracker identifiers which the event will be sent to\n */\nexport function trackStructEvent(event: StructuredEvent & CommonEventProperties, trackers?: Array<string>) {\n  dispatchToTrackers(trackers, (t) => {\n    t.core.track(buildStructEvent(event), event.context, event.timestamp);\n  });\n}\n\n/**\n * Track a self-describing event happening on this page.\n * A custom event type, allowing for an event to be tracked using your own custom schema\n * and a data object which conforms to the supplied schema\n *\n * @param event - The event information\n * @param trackers - The tracker identifiers which the event will be sent to\n */\nexport function trackSelfDescribingEvent(event: SelfDescribingEvent & CommonEventProperties, trackers?: Array<string>) {\n  dispatchToTrackers(trackers, (t) => {\n    t.core.track(buildSelfDescribingEvent({ event: event.event }), event.context, event.timestamp);\n  });\n}\n\n/**\n * All provided contexts will be sent with every event\n *\n * @param contexts - An array of contexts or conditional contexts\n * @param trackers - The tracker identifiers which the global contexts will be added to\n */\nexport function addGlobalContexts(\n  contexts: Array<ConditionalContextProvider | ContextPrimitive>,\n  trackers?: Array<string>\n) {\n  dispatchToTrackers(trackers, (t) => {\n    t.core.addGlobalContexts(contexts);\n  });\n}\n\n/**\n * All provided contexts will no longer be sent with every event\n *\n * @param contexts - An array of contexts or conditional contexts\n * @param trackers - The tracker identifiers which the global contexts will be remove from\n */\nexport function removeGlobalContexts(\n  contexts: Array<ConditionalContextProvider | ContextPrimitive>,\n  trackers?: Array<string>\n) {\n  dispatchToTrackers(trackers, (t) => {\n    t.core.removeGlobalContexts(contexts);\n  });\n}\n\n/**\n * Clear all global contexts that are sent with events\n *\n * @param trackers - The tracker identifiers which the global contexts will be cleared from\n */\nexport function clearGlobalContexts(trackers?: Array<string>) {\n  dispatchToTrackers(trackers, (t) => {\n    t.core.clearGlobalContexts();\n  });\n}\n\n/**\n * Stop regenerating `pageViewId` (available from `web_page` context)\n *\n * @param trackers - The tracker identifiers which the event will preserve their Page View Ids\n */\nexport function preservePageViewId(trackers?: Array<string>) {\n  dispatchToTrackers(trackers, (t) => {\n    t.preservePageViewId();\n  });\n}\n\n/**\n * Disables anonymous tracking if active (ie. tracker initialized with `anonymousTracking`)\n * For stateStorageStrategy override, uses supplied value first,\n * falls back to one defined in initial config, otherwise uses cookieAndLocalStorage.\n *\n * @param configuration - The configuration for disabling anonymous tracking\n * @param trackers - The tracker identifiers which the event will be sent to\n */\nexport function disableAnonymousTracking(\n  configuration?: DisableAnonymousTrackingConfiguration,\n  trackers?: Array<string>\n) {\n  dispatchToTrackers(trackers, (t) => {\n    t.disableAnonymousTracking(configuration);\n  });\n}\n\n/**\n * Enables anonymous tracking (ie. tracker initialized without `anonymousTracking`)\n *\n * @param configuration - The configuration for enabling anonymous tracking\n * @param trackers - The tracker identifiers which the event will be sent to\n */\nexport function enableAnonymousTracking(\n  configuration?: EnableAnonymousTrackingConfiguration,\n  trackers?: Array<string>\n) {\n  dispatchToTrackers(trackers, (t) => {\n    t.enableAnonymousTracking(configuration);\n  });\n}\n\n/**\n * Clears all cookies and local storage containing user and session identifiers\n *\n * @param trackers - The tracker identifiers which the event will be sent to\n */\nexport function clearUserData(configuration?: ClearUserDataConfiguration, trackers?: Array<string>) {\n  dispatchToTrackers(trackers, (t) => {\n    t.clearUserData(configuration);\n  });\n}\n\n/**\n * Add a plugin into the plugin collection after trackers have already been initialised\n *\n * @param configuration - The plugin to add\n * @param trackers - The tracker identifiers which the plugin will be added to\n */\nexport function addPlugin(configuration: BrowserPluginConfiguration, trackers?: Array<string>) {\n  dispatchToTrackers(trackers, (t) => {\n    t.addPlugin(configuration);\n  });\n}\n","/*\n * Copyright (c) 2021 Snowplow Analytics Ltd, 2010 Anthon Pang\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are met:\n *\n * 1. Redistributions of source code must retain the above copyright notice, this\n *    list of conditions and the following disclaimer.\n *\n * 2. Redistributions in binary form must reproduce the above copyright notice,\n *    this list of conditions and the following disclaimer in the documentation\n *    and/or other materials provided with the distribution.\n *\n * 3. Neither the name of the copyright holder nor the names of its\n *    contributors may be used to endorse or promote products derived from\n *    this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\n * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\n * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\n * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport {\n  createSharedState,\n  addTracker,\n  TrackerConfiguration,\n  BrowserTracker,\n  BrowserPlugin,\n} from '@snowplow/browser-tracker-core';\nimport { version } from '@snowplow/tracker-core';\n\nconst state = typeof window !== 'undefined' ? createSharedState() : undefined;\n\n/**\n * Initialise a new tracker\n *\n * @param trackerId - The tracker id - also known as tracker namespace\n * @param endpoint - Collector endpoint in the form collector.mysite.com\n */\nexport function newTracker(trackerId: string, endpoint: string): BrowserTracker;\n/**\n * Initialise a new tracker\n *\n * @param trackerId - The tracker id - also known as tracker namespace\n * @param endpoint - Collector endpoint in the form collector.mysite.com\n * @param configuration - The initialisation options of the tracker\n */\nexport function newTracker(trackerId: string, endpoint: string, configuration: TrackerConfiguration): BrowserTracker;\n/**\n * Initialise a new tracker\n *\n * @param trackerId - The tracker id - also known as tracker namespace\n * @param endpoint - Collector endpoint in the form collector.mysite.com\n * @param configuration - The initialisation options of the tracker\n */\nexport function newTracker(trackerId: string, endpoint: string, configuration: TrackerConfiguration = {}) {\n  if (state) {\n    return addTracker(trackerId, trackerId, `js-${version}`, endpoint, state, configuration);\n  } else {\n    return undefined;\n  }\n}\n\nexport { BrowserTracker, TrackerConfiguration, BrowserPlugin };\nexport { version };\nexport * from './api';\n"]},"metadata":{},"sourceType":"module"}